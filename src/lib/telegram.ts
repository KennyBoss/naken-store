// Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface TelegramMessage {
  chat_id: string | number
  text: string
  parse_mode?: 'HTML' | 'Markdown' | 'MarkdownV2'
  disable_web_page_preview?: boolean
}

interface ChatNotification {
  sessionId: string
  senderName: string
  message: string
  isFromUser: boolean
  timestamp: Date
}

interface OrderNotification {
  orderNumber: string
  customerName: string
  customerPhone?: string
  customerEmail?: string
  total: number
  items: Array<{
    productName: string
    quantity: number
    price: number
  }>
  address?: string
  paymentMethod?: string
  shippingMethod?: string
}

class TelegramBot {
  private botToken: string
  private chatId: string

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || ''
    this.chatId = process.env.TELEGRAM_CHAT_ID || ''
    
    if (!this.botToken || !this.chatId) {
      console.warn('‚ö†Ô∏è Telegram bot token –∏–ª–∏ chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
    }
  }

  private async sendMessage(message: TelegramMessage): Promise<boolean> {
    if (!this.botToken || !this.chatId) {
      console.log('‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ')
      return false
    }

    try {
      const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...message,
          chat_id: this.chatId,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', errorData)
        return false
      }

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
      return true
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
      return false
    }
  }

  // üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
  async sendChatNotification(data: ChatNotification): Promise<boolean> {
    const { sessionId, senderName, message, isFromUser, timestamp } = data
    
    const emoji = isFromUser ? 'üë§' : 'üë®‚Äçüíº'
    const typeLabel = isFromUser ? '–ö–õ–ò–ï–ù–¢' : '–ú–ï–ù–ï–î–ñ–ï–†'
    const timeStr = timestamp.toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })

    const text = `${emoji} <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –í –ß–ê–¢–ï</b>

<b>–¢–∏–ø:</b> ${typeLabel}
<b>–û—Ç:</b> ${senderName}
<b>–í—Ä–µ–º—è:</b> ${timeStr}
<b>–°–µ—Å—Å–∏—è:</b> ${sessionId}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${message}

${isFromUser ? 'üî• <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞!</b>' : '‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞'}`

    return this.sendMessage({
      chat_id: this.chatId,
      text,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    })
  }

  // üõí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  async sendOrderNotification(data: OrderNotification): Promise<boolean> {
    const { 
      orderNumber, 
      customerName, 
      customerPhone, 
      customerEmail,
      total, 
      items, 
      address,
      paymentMethod,
      shippingMethod 
    } = data
    
    const timeStr = new Date().toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const itemsList = items.map((item, index) => 
      `${index + 1}. ${item.productName}\n   –ö–æ–ª-–≤–æ: ${item.quantity} —à—Ç.\n   –¶–µ–Ω–∞: ${formatPrice(item.price)}`
    ).join('\n\n')

    const text = `üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>

<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> ${orderNumber}
<b>–í—Ä–µ–º—è:</b> ${timeStr}

<b>–ö–õ–ò–ï–ù–¢:</b>
üë§ <b>–ò–º—è:</b> ${customerName}
${customerPhone ? `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${customerPhone}` : ''}
${customerEmail ? `üìß <b>Email:</b> ${customerEmail}` : ''}

<b>–¢–û–í–ê–†–´:</b>
${itemsList}

<b>üí∞ –ò–¢–û–ì–û: ${formatPrice(total)}</b>

${address ? `<b>üì¶ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n${address}` : ''}
${shippingMethod ? `<b>üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${shippingMethod}` : ''}
${paymentMethod ? `<b>üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ${paymentMethod}` : ''}

üî• <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞!</b>`

    return this.sendMessage({
      chat_id: this.chatId,
      text,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    })
  }

  // üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  async sendOrderStatusNotification(orderNumber: string, oldStatus: string, newStatus: string, customerName: string): Promise<boolean> {
    const statusEmojis: Record<string, string> = {
      'PENDING': '‚è≥',
      'CONFIRMED': '‚úÖ',
      'PROCESSING': '‚öôÔ∏è',
      'SHIPPED': 'üöö',
      'DELIVERED': 'üì¶',
      'CANCELLED': '‚ùå'
    }

    const statusNames: Record<string, string> = {
      'PENDING': '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      'CONFIRMED': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'PROCESSING': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'SHIPPED': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      'DELIVERED': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω'
    }

    const text = `üìã <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê</b>

<b>–ó–∞–∫–∞–∑:</b> ${orderNumber}
<b>–ö–ª–∏–µ–Ω—Ç:</b> ${customerName}
<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}

<b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:</b>
${statusEmojis[oldStatus] || '‚≠ï'} ${statusNames[oldStatus] || oldStatus} ‚Üí ${statusEmojis[newStatus] || '‚≠ï'} ${statusNames[newStatus] || newStatus}`

    return this.sendMessage({
      chat_id: this.chatId,
      text,
      parse_mode: 'HTML',
    })
  }
}

// Utility —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
function formatPrice(price: number): string {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price)
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramBot = new TelegramBot()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export type { ChatNotification, OrderNotification } 