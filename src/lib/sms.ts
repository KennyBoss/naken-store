import axios from 'axios'
import { createSMSCode, verifySMSCodeDB } from '@/lib/auth-db'

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const normalizePhone = (phone: string): string => {
  let normalized = phone.replace(/\D/g, '')
  if (normalized.startsWith('8')) {
    normalized = '7' + normalized.substring(1)
  }
  if (normalized.length === 10) {
    normalized = '7' + normalized
  }
  return normalized
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ SMS-–¶–µ–Ω—Ç—Ä
export const sendSMSCode = async (phone: string): Promise<string> => {
  const normalizedPhone = normalizePhone(phone)
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –≤ –ë–î
  const code = await createSMSCode(phone)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SMS-–¶–µ–Ω—Ç—Ä
  const smscLogin = process.env.SMSCENTER_LOGIN
  const smscPassword = process.env.SMSCENTER_PASSWORD
  
  if (!smscLogin || !smscPassword) {
    console.log(`\nüî• SMS –ö–û–î –î–õ–Ø +${normalizedPhone}: ${code}\n`)
    console.log('‚ö†Ô∏è  –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –¥–æ–±–∞–≤—å—Ç–µ SMSCENTER_LOGIN –∏ SMSCENTER_PASSWORD –≤ .env')
    return code
  }

  try {
    const smscResponse = await axios.get('https://smsc.ru/sys/send.php', {
      params: {
        login: smscLogin,
        psw: smscPassword,
        phones: normalizedPhone,
        mes: code, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        fmt: 3, // JSON —Ñ–æ—Ä–º–∞—Ç
        sender: 'SMSC', // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        translit: 1 // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
      }
    })

    console.log('SMS-–¶–µ–Ω—Ç—Ä –æ—Ç–≤–µ—Ç:', smscResponse.data)

    if (!smscResponse.data.error_code) {
      console.log(`‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ SMS-–¶–µ–Ω—Ç—Ä –Ω–∞ +${normalizedPhone}`)
      return code
    } else {
      throw new Error(`SMS-–¶–µ–Ω—Ç—Ä error: ${smscResponse.data.error}`)
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error)
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏
    console.log(`\nüî• SMS –ö–û–î –î–õ–Ø +${normalizedPhone}: ${code} (fallback)\n`)
    return code
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞
export const verifySMSCode = async (phone: string, code: string): Promise<boolean> => {
  return await verifySMSCodeDB(phone, code)
}

 