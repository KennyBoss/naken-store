import { prisma } from '@/lib/db'

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ SMS –∫–æ–¥–∞ (4 —Ü–∏—Ñ—Ä—ã)
const generateSMSCode = (): string => {
  return Math.floor(1000 + Math.random() * 9000).toString()
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ Email –∫–æ–¥–∞ (6 —Ü–∏—Ñ—Ä)
const generateEmailCode = (): string => {
  return Math.floor(100000 + Math.random() * 900000).toString()
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const normalizePhone = (phone: string): string => {
  let normalized = phone.replace(/\D/g, '')
  if (normalized.startsWith('8')) {
    normalized = '7' + normalized.substring(1)
  }
  if (normalized.length === 10) {
    normalized = '7' + normalized
  }
  return normalized
}

// –°–æ–∑–¥–∞–Ω–∏–µ SMS –∫–æ–¥–∞ –≤ –ë–î
export const createSMSCode = async (phone: string): Promise<string> => {
  const normalizedPhone = normalizePhone(phone)
  const code = generateSMSCode()
  const expires = new Date(Date.now() + 10 * 60 * 1000) // 10 –º–∏–Ω—É—Ç

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
  await prisma.authCode.deleteMany({
    where: {
      contact: normalizedPhone,
      type: 'SMS'
    }
  })

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
  await prisma.authCode.create({
    data: {
      type: 'SMS',
      contact: normalizedPhone,
      code,
      expires
    }
  })

  console.log(`üì± SMS –∫–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è +${normalizedPhone}: ${code}`)
  return code
}

// –°–æ–∑–¥–∞–Ω–∏–µ Email –∫–æ–¥–∞ –≤ –ë–î
export const createEmailCode = async (email: string): Promise<string> => {
  const normalizedEmail = email.toLowerCase()
  const code = generateEmailCode()
  const expires = new Date(Date.now() + 15 * 60 * 1000) // 15 –º–∏–Ω—É—Ç

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ email
  await prisma.authCode.deleteMany({
    where: {
      contact: normalizedEmail,
      type: 'EMAIL'
    }
  })

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
  await prisma.authCode.create({
    data: {
      type: 'EMAIL',
      contact: normalizedEmail,
      code,
      expires
    }
  })

  console.log(`üìß Email –∫–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è ${normalizedEmail}: ${code}`)
  return code
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞ –∏–∑ –ë–î
export const verifySMSCodeDB = async (phone: string, code: string): Promise<boolean> => {
  const normalizedPhone = normalizePhone(phone)
  const cleanCode = code.trim() // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞ –∏–∑ –ë–î:`)
  console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: +${normalizedPhone}`)
  console.log(`   –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: "${cleanCode}"`)

  // –ò—â–µ–º –∫–æ–¥ –≤ –ë–î
  const authCode = await prisma.authCode.findFirst({
    where: {
      contact: normalizedPhone,
      type: 'SMS',
      used: false
    },
    orderBy: {
      createdAt: 'desc'
    }
  })

  console.log(`   –ù–∞–π–¥–µ–Ω –∫–æ–¥: "${authCode?.code || '–ù–ï–¢'}"`)
  console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${authCode ? authCode.expires.toLocaleString() : '–ù–ï–¢'}`)

  if (!authCode) {
    console.log(`‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è +${normalizedPhone}`)
    return false
  }

  if (authCode.expires <= new Date()) {
    console.log(`‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫ –¥–ª—è +${normalizedPhone}`)
    return false
  }

  if (authCode.code !== cleanCode) {
    console.log(`‚ùå –ö–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: "${authCode.code}" !== "${cleanCode}"`)
    return false
  }

  // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
  await prisma.authCode.update({
    where: { id: authCode.id },
    data: { used: true }
  })

  console.log(`‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π –¥–ª—è +${normalizedPhone}`)
  return true
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Email –∫–æ–¥–∞ –∏–∑ –ë–î
export const verifyEmailCodeDB = async (email: string, code: string): Promise<boolean> => {
  const normalizedEmail = email.toLowerCase()
  const cleanCode = code.trim() // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Email –∫–æ–¥–∞ –∏–∑ –ë–î:`)
  console.log(`   Email: ${normalizedEmail}`)
  console.log(`   –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: "${cleanCode}"`)

  // –ò—â–µ–º –∫–æ–¥ –≤ –ë–î
  const authCode = await prisma.authCode.findFirst({
    where: {
      contact: normalizedEmail,
      type: 'EMAIL',
      used: false
    },
    orderBy: {
      createdAt: 'desc'
    }
  })

  console.log(`   –ù–∞–π–¥–µ–Ω –∫–æ–¥: "${authCode?.code || '–ù–ï–¢'}"`)
  console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${authCode ? authCode.expires.toLocaleString() : '–ù–ï–¢'}`)

  if (!authCode) {
    console.log(`‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${normalizedEmail}`)
    return false
  }

  if (authCode.expires <= new Date()) {
    console.log(`‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫ –¥–ª—è ${normalizedEmail}`)
    return false
  }

  if (authCode.code !== cleanCode) {
    console.log(`‚ùå –ö–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: "${authCode.code}" !== "${cleanCode}"`)
    return false
  }

  // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
  await prisma.authCode.update({
    where: { id: authCode.id },
    data: { used: true }
  })

  console.log(`‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π –¥–ª—è ${normalizedEmail}`)
  return true
} 