import crypto from 'crypto'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è T-Bank API
interface TBankPaymentData {
  Amount: number
  OrderId: string
  Description?: string
  CustomerKey?: string
  NotificationURL?: string
  SuccessURL?: string
  FailURL?: string
  PayType?: 'O' // O - –æ–¥–Ω–æ—Å—Ç–∞–¥–∏–π–Ω—ã–π –ø–ª–∞—Ç–µ–∂
  Receipt?: any // –î–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
}

interface TBankInitResponse {
  Success: boolean
  ErrorCode?: string
  Message?: string
  Details?: string
  PaymentId?: string
  PaymentURL?: string
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è T-Bank API (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
function generateToken(params: Record<string, any>, password: string): string {
  console.log('üîê T-Bank –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', params)
  
  // 1. –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ö–û–†–ù–ï–í–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏—Å–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –º–∞—Å—Å–∏–≤—ã)
  const rootParams: Record<string, any> = {}
  
  for (const [key, value] of Object.entries(params)) {
    // –ò—Å–∫–ª—é—á–∞–µ–º Token, Receipt, DATA (–æ–±—ä–µ–∫—Ç—ã) —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ T-Bank
    if (key !== 'Token' && key !== 'Receipt' && key !== 'DATA') {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–∞–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (typeof value !== 'object' || value === null) {
        rootParams[key] = value
      }
    }
  }
  
  // 2. –î–æ–±–∞–≤–ª—è–µ–º Password –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  rootParams.Password = password
  
  console.log('üîê T-Bank —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã + –ø–∞—Ä–æ–ª—å:', rootParams)
  
  // 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á—É
  const sortedKeys = Object.keys(rootParams).sort()
  console.log('üîê T-Bank –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:', sortedKeys)
  
  // 4. –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
  let concatenatedString = ''
  sortedKeys.forEach(key => {
    const value = rootParams[key]
    if (value !== undefined && value !== null && value !== '') {
      concatenatedString += value
    }
  })
  
  console.log('üîê T-Bank —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', concatenatedString)
  
  // 5. –°–æ–∑–¥–∞–µ–º SHA-256 —Ö–µ—à
  const token = crypto.createHash('sha256').update(concatenatedString, 'utf8').digest('hex')
  console.log('üîê T-Bank —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', token)
  
  return token
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è T-Bank (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79999999999)
function formatPhoneForTBank(phone?: string): string {
  if (!phone) return '+79999999999'
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
  const digits = phone.replace(/\D/g, '')
  
  // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –º–µ–Ω—è–µ–º –Ω–∞ 7
  const normalized = digits.startsWith('8') ? '7' + digits.slice(1) : digits
  
  // –î–æ–±–∞–≤–ª—è–µ–º + –µ—Å–ª–∏ –Ω–µ—Ç
  return normalized.startsWith('+') ? normalized : '+' + normalized
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
function validateEmail(email?: string): string {
  if (!email) return 'no-reply@naken-store.com'
  
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  if (!emailRegex.test(email)) {
    console.log('‚ö†Ô∏è Invalid email provided:', email, 'using default')
    return 'no-reply@naken-store.com'
  }
  
  return email
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ T-Bank
export async function createTBankPayment(
  amount: number, 
  orderId: string, 
  customerEmail?: string,
  orderItems?: Array<{
    name: string
    price: number
    quantity: number
  }>,
  customerPhone?: string,
  shippingCost?: number
): Promise<TBankInitResponse> {
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç T-Bank
  const terminalKey = process.env.TBANK_TERMINAL_KEY!
  const password = process.env.TBANK_PASSWORD!
  
  if (!terminalKey || !password) {
    throw new Error('T-Bank credentials not configured')
  }

  const baseUrl = process.env.NODE_ENV === 'production' 
    ? 'https://securepay.tinkoff.ru/v2/' 
    : 'https://rest-api-test.tinkoff.ru/v2/'

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —á–µ–∫–∞
  let items = []
  let totalItemsAmount = 0
  
  if (orderItems && orderItems.length > 0) {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    items = orderItems.map(item => {
      const itemAmount = Math.round(item.price * item.quantity * 100)
      totalItemsAmount += itemAmount
      return {
        Name: item.name,
        Price: Math.round(item.price * 100), // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        Quantity: item.quantity,
        Amount: itemAmount, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        Tax: 'vat0', // –ù–î–° 0%
        PaymentMethod: 'full_payment',
        PaymentObject: 'commodity'
      }
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (shippingCost && shippingCost > 0) {
      const shippingAmount = Math.round(shippingCost * 100)
      items.push({
        Name: '–î–æ—Å—Ç–∞–≤–∫–∞',
        Price: shippingAmount,
        Quantity: 1,
        Amount: shippingAmount,
        Tax: 'vat0',
        PaymentMethod: 'full_payment',
        PaymentObject: 'service'
      })
      totalItemsAmount += shippingAmount
    }
  } else {
    // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –æ–±—â–∏–π —Ç–æ–≤–∞—Ä
    const totalAmount = Math.round(amount * 100)
    items = [{
      Name: '–¢–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ NAKEN',
      Price: totalAmount,
      Quantity: 1,
      Amount: totalAmount,
      Tax: 'vat0', // –ù–î–° 0%
      PaymentMethod: 'full_payment',
      PaymentObject: 'commodity'
    }]
    totalItemsAmount = totalAmount
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ —Ä–∞–≤–Ω–∞ –æ–±—â–µ–π —Å—É–º–º–µ –∑–∞–∫–∞–∑–∞
  const orderAmountCopecks = Math.round(amount * 100)
  if (totalItemsAmount !== orderAmountCopecks) {
    console.warn(
      `‚ö†Ô∏è T-Bank: —Å—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ (${totalItemsAmount}) –Ω–µ —Ä–∞–≤–Ω–∞ –æ–±—â–µ–π —Å—É–º–º–µ (${orderAmountCopecks})`,
      { items, shippingCost, amount }
    )
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã —Å—É–º–º—ã —Å–æ–≤–ø–∞–ª–∏
    if (items.length > 0) {
      const diff = orderAmountCopecks - totalItemsAmount
      items[items.length - 1].Amount += diff
      items[items.length - 1].Price += diff
    }
  }

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
  const paymentData: TBankPaymentData & { TerminalKey: string; DATA?: any } = {
    TerminalKey: terminalKey,
    Amount: Math.round(amount * 100), // T-Bank –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    OrderId: orderId,
    Description: `–ó–∞–∫–∞–∑ #${orderId} –≤ –º–∞–≥–∞–∑–∏–Ω–µ NAKEN`,
    PayType: 'O', // –û–¥–Ω–æ—Å—Ç–∞–¥–∏–π–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    NotificationURL: 'https://naken.store/api/tbank/notification' // Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  }

  // üÜï –î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—é
  if (process.env.NODE_ENV === 'production') {
    // DATA –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã  
    paymentData.DATA = {
      connection_type: 'naken_store_api',
      Email: validateEmail(customerEmail),
      Phone: formatPhoneForTBank(customerPhone)
    }
    
    // Receipt –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    paymentData.Receipt = {
      Email: validateEmail(customerEmail),
      Phone: formatPhoneForTBank(customerPhone),
      Taxation: 'usn_income', // –£–°–ù –¥–æ—Ö–æ–¥—ã (–±–µ–∑ –ù–î–°)
      Items: items
    }
    
    console.log('üöÄ T-Bank Production: –≤–∫–ª—é—á–µ–Ω—ã –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã + —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è')
  } else {
    console.log('üß™ T-Bank Test: —Ç–æ–ª—å–∫–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –±–µ–∑ —á–µ–∫–∞')
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üìã T-Bank Receipt:', JSON.stringify(paymentData.Receipt, null, 2))

  // –£–±–∏—Ä–∞–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
  Object.keys(paymentData).forEach(key => {
    if (paymentData[key as keyof typeof paymentData] === undefined) {
      delete paymentData[key as keyof typeof paymentData]
    }
  })

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
  const token = generateToken(paymentData, password)
  
  const requestBody = {
    ...paymentData,
    Token: token
  }
  
  console.log('üè¶ T-Bank Request Body:', JSON.stringify(requestBody, null, 2))
  
  try {
    const response = await fetch(`${baseUrl}Init`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    })

    const result: TBankInitResponse = await response.json()
    
    console.log('T-Bank Init Response:', result)
    
    if (!result.Success) {
      throw new Error(`T-Bank Error: ${result.ErrorCode} - ${result.Message}`)
    }

    return result
    
  } catch (error) {
    console.error('T-Bank payment creation error:', error)
    throw error
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
export async function getTBankPaymentStatus(paymentId: string): Promise<any> {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç T-Bank
  const terminalKey = process.env.TBANK_TERMINAL_KEY!
  const password = process.env.TBANK_PASSWORD!
  
  if (!terminalKey || !password) {
    throw new Error('T-Bank credentials not configured')
  }

  const baseUrl = process.env.NODE_ENV === 'production' 
    ? 'https://securepay.tinkoff.ru/v2/' 
    : 'https://rest-api-test.tinkoff.ru/v2/'

  const params = {
    TerminalKey: terminalKey,
    PaymentId: paymentId
  }

  const token = generateToken(params, password)

  try {
    const response = await fetch(`${baseUrl}GetState`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ...params,
        Token: token
      })
    })

    return await response.json()
    
  } catch (error) {
    console.error('T-Bank status check error:', error)
    throw error
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç T-Bank
export function verifyTBankNotification(notification: any, password: string): boolean {
  const receivedToken = notification.Token
  delete notification.Token
  
  const calculatedToken = generateToken(notification, password)
  
  return receivedToken === calculatedToken
} 