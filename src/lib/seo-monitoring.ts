// –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SEO –ø–æ–∑–∏—Ü–∏–π –¥–ª—è NAKEN Store

interface SEOMetrics {
  keyword: string
  position: number
  url: string
  searchVolume: number
  difficulty: number
  ctr: number
  date: Date
}

interface CompetitorData {
  domain: string
  keyword: string
  position: number
  title: string
  description: string
}

// –ö–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
export const TARGET_KEYWORDS = {
  // –ë—Ä–µ–Ω–¥–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–æ–ø-3)
  brand: [
    'NAKEN Store',
    '–Ω–µ–π–∫–µ–Ω —Å—Ç–æ—Ä',
    'naken –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã',
    'naken –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω'
  ],
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Ü–µ–ª—å —Ç–æ–ø-10)
  category: [
    '–æ–¥–µ–∂–¥–∞ –≤ —Å—Ç–∏–ª–µ old money',
    '–∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–¥–µ–∂–¥–∞',
    '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∫—É–ø–∏—Ç—å',
    '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç',
    '—Å—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ –ø—Ä–µ–º–∏—É–º',
    '–¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ —Ä–æ—Å—Å–∏—è'
  ],
  
  // –¢–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Ü–µ–ª—å —Ç–æ–ø-20)
  product: [
    '—Ñ—É—Ç–±–æ–ª–∫–∞ old money',
    '—Ö—É–¥–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å',
    '—Ä—É–±–∞—à–∫–∞ –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è',
    '–±—Ä—é–∫–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –º—É–∂—Å–∫–∏–µ',
    '–ø–ª–∞—Ç—å–µ –≤ —Å—Ç–∏–ª–µ old money',
    '—Å–≤–∏—Ç–µ—Ä –∫–∞—à–µ–º–∏—Ä–æ–≤—ã–π'
  ],
  
  // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–≤—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è)
  commercial: [
    '–∫—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É old money',
    '–∑–∞–∫–∞–∑–∞—Ç—å —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É',
    '–æ–¥–µ–∂–¥–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –º–æ—Å–∫–≤–∞',
    '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã —Å–∫–∏–¥–∫–∏',
    '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞ –Ω–µ–¥–æ—Ä–æ–≥–æ',
    '–º–æ–¥–Ω–∞—è –æ–¥–µ–∂–¥–∞ 2025'
  ],
  
  // Long-tail –∑–∞–ø—Ä–æ—Å—ã (–Ω–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è)
  longTail: [
    '–≥–¥–µ –∫—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É old money –≤ –º–æ—Å–∫–≤–µ',
    '—Ñ—É—Ç–±–æ–ª–∫–∞ –±–µ–∂–µ–≤–∞—è –º—É–∂—Å–∫–∞—è —Ä–∞–∑–º–µ—Ä M',
    '—Ö—É–¥–∏ —á–µ—Ä–Ω—ã–π —Å –∫–∞–ø—é—à–æ–Ω–æ–º –¥–æ—Å—Ç–∞–≤–∫–∞',
    '–æ–¥–µ–∂–¥–∞ –≤ —Å—Ç–∏–ª–µ —Å—Ç–∞—Ä—ã—Ö –¥–µ–Ω–µ–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç',
    '–∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã –∫—É–ø–∏—Ç—å'
  ]
}

// –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
export const COMPETITORS = [
  'zara.com',
  'hm.com',
  'befree.ru',
  'lamoda.ru',
  'wildberries.ru',
  'ozon.ru',
  'reserved.com',
  'pullbear.com'
]

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è API)
export async function checkSEOPositions(keywords: string[]): Promise<SEOMetrics[]> {
  const results: SEOMetrics[] = []
  
  for (const keyword of keywords) {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –∫ Serpstat, Ahrefs –∏–ª–∏ SemRush
    const mockPosition = Math.floor(Math.random() * 100) + 1
    const mockVolume = getSearchVolume(keyword)
    
    results.push({
      keyword,
      position: mockPosition,
      url: `https://naken.store${getRelevantUrl(keyword)}`,
      searchVolume: mockVolume,
      difficulty: calculateKeywordDifficulty(keyword),
      ctr: calculateCTR(mockPosition),
      date: new Date()
    })
  }
  
  return results
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
function getSearchVolume(keyword: string): number {
  const volumeMap: Record<string, number> = {
    '–æ–¥–µ–∂–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω': 45000,
    '–∫—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É –æ–Ω–ª–∞–π–Ω': 38000,
    '–º—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞': 89000,
    '–∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞': 125000,
    '–æ–¥–µ–∂–¥–∞ –≤ —Å—Ç–∏–ª–µ old money': 5200,
    '—Å—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∫—É–ø–∏—Ç—å': 8900,
    'NAKEN Store': 850,
    '—Ñ—É—Ç–±–æ–ª–∫–∞ old money': 1200
  }
  
  return volumeMap[keyword] || Math.floor(Math.random() * 10000) + 100
}

// –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
function calculateKeywordDifficulty(keyword: string): number {
  if (keyword.includes('NAKEN') || keyword.includes('–Ω–µ–π–∫–µ–Ω')) return 15 // –ë—Ä–µ–Ω–¥–æ–≤—ã–µ - –ª–µ–≥–∫–∏–µ
  if (keyword.length > 40) return 25 // Long-tail - —Å—Ä–µ–¥–Ω–∏–µ
  if (keyword.includes('–∫—É–ø–∏—Ç—å') || keyword.includes('–∑–∞–∫–∞–∑–∞—Ç—å')) return 65 // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ - —Å–ª–æ–∂–Ω—ã–µ
  return 45 // –û–±—ã—á–Ω—ã–µ
}

// –†–∞—Å—á–µ—Ç CTR –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
function calculateCTR(position: number): number {
  const ctrMap: Record<number, number> = {
    1: 28.5, 2: 15.7, 3: 11.0, 4: 8.0, 5: 7.2,
    6: 5.1, 7: 4.0, 8: 3.2, 9: 2.8, 10: 2.5
  }
  
  if (position <= 10) return ctrMap[position] || 2.0
  if (position <= 20) return 1.5
  if (position <= 50) return 0.8
  return 0.3
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
function getRelevantUrl(keyword: string): string {
  if (keyword.includes('NAKEN') || keyword.includes('–Ω–µ–π–∫–µ–Ω')) return '/'
  if (keyword.includes('—Ñ—É—Ç–±–æ–ª–∫–∞')) return '/catalog?category=—Ñ—É—Ç–±–æ–ª–∫–∏'
  if (keyword.includes('—Ö—É–¥–∏')) return '/catalog?category=—Ö—É–¥–∏'
  if (keyword.includes('old money')) return '/catalog?style=old-money'
  if (keyword.includes('–∫–∞—Ç–∞–ª–æ–≥') || keyword.includes('–∫—É–ø–∏—Ç—å')) return '/catalog'
  return '/'
}

// –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
export async function analyzeCompetitors(keyword: string): Promise<CompetitorData[]> {
  const results: CompetitorData[] = []
  
  for (const domain of COMPETITORS.slice(0, 5)) {
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ SERP
    results.push({
      domain,
      keyword,
      position: Math.floor(Math.random() * 20) + 1,
      title: generateCompetitorTitle(domain, keyword),
      description: generateCompetitorDescription(domain, keyword)
    })
  }
  
  return results.sort((a, b) => a.position - b.position)
}

function generateCompetitorTitle(domain: string, keyword: string): string {
  const brand = domain.split('.')[0].toUpperCase()
  return `${keyword} | ${brand} - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω`
}

function generateCompetitorDescription(domain: string, keyword: string): string {
  const brand = domain.split('.')[0].toUpperCase()
  return `${keyword} –≤ ${brand}. –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏, —Å–∫–∏–¥–∫–∏ –¥–æ 70%.`
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO –æ—Ç—á–µ—Ç–∞
export async function generateSEOReport(): Promise<{
  summary: any,
  topKeywords: SEOMetrics[],
  improvementOpportunities: string[],
  competitorAnalysis: any
}> {
  const allKeywords = [
    ...TARGET_KEYWORDS.brand,
    ...TARGET_KEYWORDS.category,
    ...TARGET_KEYWORDS.product,
    ...TARGET_KEYWORDS.commercial
  ]
  
  const positions = await checkSEOPositions(allKeywords)
  
  const topKeywords = positions
    .filter(p => p.position <= 10)
    .sort((a, b) => a.position - b.position)
  
  const summary = {
    totalKeywords: positions.length,
    top3: positions.filter(p => p.position <= 3).length,
    top10: positions.filter(p => p.position <= 10).length,
    top20: positions.filter(p => p.position <= 20).length,
    avgPosition: Math.round(positions.reduce((sum, p) => sum + p.position, 0) / positions.length),
    estimatedTraffic: positions.reduce((sum, p) => sum + (p.searchVolume * p.ctr / 100), 0),
    totalVolume: positions.reduce((sum, p) => sum + p.searchVolume, 0)
  }
  
  const improvementOpportunities = generateImprovements(positions)
  
  return {
    summary,
    topKeywords,
    improvementOpportunities,
    competitorAnalysis: await analyzeTopCompetitors()
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
function generateImprovements(positions: SEOMetrics[]): string[] {
  const improvements: string[] = []
  
  const weakPositions = positions.filter(p => p.position > 20 && p.searchVolume > 1000)
  if (weakPositions.length > 0) {
    improvements.push(`üîß –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å ${weakPositions.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø–æ–∑–∏—Ü–∏–π 20+`)
  }
  
  const highVolumeOutside = positions.filter(p => p.position > 10 && p.searchVolume > 5000)
  if (highVolumeOutside.length > 0) {
    improvements.push(`üìà –ü–æ–¥–Ω—è—Ç—å –≤ —Ç–æ–ø-10: "${highVolumeOutside[0].keyword}" (${highVolumeOutside[0].searchVolume}/–º–µ—Å)`)
  }
  
  const brandingIssues = positions.filter(p => 
    p.keyword.includes('NAKEN') && p.position > 3
  )
  if (brandingIssues.length > 0) {
    improvements.push(`üè∑Ô∏è –£–ª—É—á—à–∏—Ç—å –±—Ä–µ–Ω–¥–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —Ç–æ–ø-3`)
  }
  
  improvements.push(`üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ç—Ä–∞—Ñ–∏–∫–∞: +${Math.round(positions.reduce((sum, p) => sum + p.searchVolume * 0.1, 0))} –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π/–º–µ—Å`)
  
  return improvements
}

// –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
async function analyzeTopCompetitors() {
  const topKeyword = '–æ–¥–µ–∂–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω'
  const competitors = await analyzeCompetitors(topKeyword)
  
  return {
    topCompetitor: competitors[0],
    ourPosition: Math.floor(Math.random() * 30) + 15, // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è NAKEN
    gapAnalysis: competitors.slice(0, 3).map(c => ({
      domain: c.domain,
      advantage: `–ü–æ–∑–∏—Ü–∏—è ${c.position}, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π title`
    }))
  }
}

// –¢—Ä–µ–∫–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π
export class SEOTracker {
  private history: SEOMetrics[] = []
  
  async trackKeywords(keywords: string[]): Promise<void> {
    const newPositions = await checkSEOPositions(keywords)
    this.history.push(...newPositions)
  }
  
  getMovement(keyword: string, days: number = 7): {
    current: number,
    previous: number,
    change: number,
    trend: 'up' | 'down' | 'stable'
  } {
    const now = new Date()
    const weekAgo = new Date(now.getTime() - days * 24 * 60 * 60 * 1000)
    
    const recent = this.history
      .filter(h => h.keyword === keyword && h.date >= weekAgo)
      .sort((a, b) => b.date.getTime() - a.date.getTime())
    
    if (recent.length < 2) {
      return { current: 0, previous: 0, change: 0, trend: 'stable' }
    }
    
    const current = recent[0].position
    const previous = recent[recent.length - 1].position
    const change = previous - current // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = —É–ª—É—á—à–µ–Ω–∏–µ
    
    return {
      current,
      previous,
      change,
      trend: change > 2 ? 'up' : change < -2 ? 'down' : 'stable'
    }
  }
  
  getTopMovers(limit: number = 5): Array<{
    keyword: string,
    change: number,
    current: number
  }> {
    const movements = TARGET_KEYWORDS.category.map(keyword => ({
      keyword,
      ...this.getMovement(keyword)
    }))
    
    return movements
      .sort((a, b) => b.change - a.change)
      .slice(0, limit)
      .map(m => ({
        keyword: m.keyword,
        change: m.change,
        current: m.current
      }))
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
export class SEOAlerts {
  static async checkAlerts(): Promise<string[]> {
    const alerts: string[] = []
    const positions = await checkSEOPositions(TARGET_KEYWORDS.brand)
    
    // –ê–ª–µ—Ä—Ç –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const brandIssues = positions.filter(p => p.position > 5)
    if (brandIssues.length > 0) {
      alerts.push(`üö® –ë—Ä–µ–Ω–¥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å "${brandIssues[0].keyword}" —É–ø–∞–ª –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${brandIssues[0].position}`)
    }
    
    // –ê–ª–µ—Ä—Ç –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–æ–ø-10
    const newTopResults = positions.filter(p => p.position <= 10)
    if (newTopResults.length > 0) {
      alerts.push(`üéâ –í–æ—à–ª–∏ –≤ —Ç–æ–ø-10 –ø–æ "${newTopResults[0].keyword}" - –ø–æ–∑–∏—Ü–∏—è ${newTopResults[0].position}`)
    }
    
    return alerts
  }
  
  static async sendDailyReport(): Promise<void> {
    const report = await generateSEOReport()
    
    console.log(`
üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô SEO –û–¢–ß–ï–¢ NAKEN STORE

üìà –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
- –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${report.summary.totalKeywords}
- –í —Ç–æ–ø-3: ${report.summary.top3}
- –í —Ç–æ–ø-10: ${report.summary.top10}
- –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: ${report.summary.avgPosition}
- –û—Ü–µ–Ω–æ—á–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫: ${Math.round(report.summary.estimatedTraffic)} –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π/–º–µ—Å

üèÜ –õ–£–ß–®–ò–ï –ü–û–ó–ò–¶–ò–ò:
${report.topKeywords.slice(0, 5).map(k => 
  `- "${k.keyword}" - –ø–æ–∑–∏—Ü–∏—è ${k.position}`
).join('\n')}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
${report.improvementOpportunities.slice(0, 3).map(i => `- ${i}`).join('\n')}
    `)
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const seoMonitoring = {
  checkPositions: checkSEOPositions,
  analyzeCompetitors,
  generateReport: generateSEOReport,
  TARGET_KEYWORDS,
  SEOTracker,
  SEOAlerts
}

export default seoMonitoring 