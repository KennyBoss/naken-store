import { NextRequest, NextResponse } from 'next/server'

// Rate limiting –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis)
interface RateLimitEntry {
  count: number
  resetTime: number
}

const rateLimitMap = new Map<string, RateLimitEntry>()

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now()
  for (const [key, entry] of rateLimitMap.entries()) {
    if (now > entry.resetTime) {
      rateLimitMap.delete(key)
    }
  }
}, 5 * 60 * 1000)

export interface RateLimitOptions {
  maxRequests: number
  windowMs: number
  keyGenerator?: (req: NextRequest) => string
}

// Rate limiting middleware
export function rateLimit(options: RateLimitOptions) {
  return (req: NextRequest) => {
    const key = options.keyGenerator ? options.keyGenerator(req) : getClientIP(req)
    const now = Date.now()
    
    const entry = rateLimitMap.get(key)
    
    if (!entry) {
      rateLimitMap.set(key, {
        count: 1,
        resetTime: now + options.windowMs
      })
      return { success: true, remaining: options.maxRequests - 1 }
    }
    
    if (now > entry.resetTime) {
      entry.count = 1
      entry.resetTime = now + options.windowMs
      return { success: true, remaining: options.maxRequests - 1 }
    }
    
    entry.count++
    
    if (entry.count > options.maxRequests) {
      return { 
        success: false, 
        remaining: 0,
        resetTime: entry.resetTime
      }
    }
    
    return { 
      success: true, 
      remaining: options.maxRequests - entry.count
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∫–ª–∏–µ–Ω—Ç–∞
export function getClientIP(req: NextRequest): string {
  const forwarded = req.headers.get('x-forwarded-for')
  const realIP = req.headers.get('x-real-ip')
  const cfConnectingIP = req.headers.get('cf-connecting-ip')
  
  if (forwarded) {
    return forwarded.split(',')[0].trim()
  }
  if (realIP) {
    return realIP.trim()
  }
  if (cfConnectingIP) {
    return cfConnectingIP.trim()
  }
  
  return '127.0.0.1'
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export function sanitizeInput(input: string): string {
  if (typeof input !== 'string') return ''
  
  return input
    .trim()
    // –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/[<>]/g, '')
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    .slice(0, 1000)
}

export function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

export function validatePhone(phone: string): boolean {
  const phoneRegex = /^\+?[1-9]\d{1,14}$/
  return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''))
}

export function validatePassword(password: string): {
  isValid: boolean
  errors: string[]
} {
  const errors: string[] = []
  
  if (password.length < 8) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
  }
  
  if (!/[A-Z]/.test(password)) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É')
  }
  
  if (!/[a-z]/.test(password)) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É')
  }
  
  if (!/\d/.test(password)) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É')
  }
  
  return {
    isValid: errors.length === 0,
    errors
  }
}

// CSRF —Ç–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
export function generateCSRFToken(): string {
  return Buffer.from(crypto.getRandomValues(new Uint8Array(32))).toString('base64')
}

export function verifyCSRFToken(token: string): boolean {
  // –í –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
  // –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  return typeof token === 'string' && token.length > 10
}

// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ API routes —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Edge Runtime

// –ó–∞—â–∏—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
export function addSecurityHeaders(response: NextResponse): NextResponse {
  // XSS Protection
  response.headers.set('X-XSS-Protection', '1; mode=block')
  
  // Content Type Options
  response.headers.set('X-Content-Type-Options', 'nosniff')
  
  // Frame Options
  response.headers.set('X-Frame-Options', 'DENY')
  
  // Referrer Policy
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  
  // Permissions Policy
  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()')
  
  return response
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
export function logSuspiciousActivity(
  type: 'failed_login' | 'rate_limit' | 'invalid_token' | 'unauthorized_access',
  details: {
    ip: string
    userAgent?: string
    userId?: string
    path?: string
    data?: unknown
  }
) {
  const logEntry = {
    timestamp: new Date().toISOString(),
    type,
    ip: details.ip,
    userAgent: details.userAgent,
    userId: details.userId,
    path: details.path,
    data: details.data
  }
  
  // –í development –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
  if (process.env.NODE_ENV === 'development') {
    console.warn('üö® SECURITY:', logEntry)
  }
  
  // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  // await sendToSecurityService(logEntry)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
export function validateFile(file: File): {
  isValid: boolean
  errors: string[]
} {
  const errors: string[] = []
  const maxSize = 5 * 1024 * 1024 // 5MB
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']
  
  if (!allowedTypes.includes(file.type)) {
    errors.push('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞')
  }
  
  if (file.size > maxSize) {
    errors.push('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 5MB)')
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (/[<>:"/\\|?*]/.test(file.name)) {
    errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞')
  }
  
  return {
    isValid: errors.length === 0,
    errors
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–π (–±–∞–∑–æ–≤–∞—è)
export function detectSQLInjection(input: string): boolean {
  const sqlKeywords = [
    'SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'CREATE', 'ALTER',
    'EXEC', 'EXECUTE', 'SCRIPT', 'UNION', 'OR 1=1', 'OR 1', 'OR TRUE',
    '--', '/*', '*/', 'xp_', 'sp_'
  ]
  
  const upperInput = input.toUpperCase()
  return sqlKeywords.some(keyword => upperInput.includes(keyword))
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ API routes
// —Ç–∞–∫ –∫–∞–∫ getServerSession –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Edge Runtime middleware 