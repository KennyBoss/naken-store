import { NextAuthOptions } from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'
import GoogleProvider from 'next-auth/providers/google'
import { PrismaAdapter } from '@next-auth/prisma-adapter'
import { verifySMSCode } from '@/lib/sms'
import { verifyEmailCode } from '@/lib/email'
import { prisma } from '@/lib/db'
import bcrypt from 'bcryptjs'

export const authOptions: NextAuthOptions = {
  adapter: PrismaAdapter(prisma),
  secret: process.env.NEXTAUTH_SECRET,
  debug: true, // –í–∫–ª—é—á–∞–µ–º debug –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞ proxy
  useSecureCookies: process.env.NODE_ENV === 'production',
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º email
  // –í–ù–ò–ú–ê–ù–ò–ï: —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã Google OAuth
  // —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  events: {
    async linkAccount({ user, account, profile }) {
      console.log('üîó –ê–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω:', { user: user.email, provider: account.provider })
    }
  },
  
  providers: [
    // Google OAuth
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),

    // –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ email + –ø–∞—Ä–æ–ª—å
    CredentialsProvider({
      id: 'credentials-password',
      name: 'Email and Password',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials) {
        console.log('üöÄ –í–´–ó–í–ê–ù –ü–†–û–í–ê–ô–î–ï–† EMAIL+PASSWORD')
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        const normalizedEmail = credentials.email.toLowerCase()

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const user = await prisma.user.findUnique({
          where: { email: normalizedEmail }
        })
        
        if (!user) {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', normalizedEmail)
          return null
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if (!user.password) {
          console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–∞—Ä–æ–ª—è')
          return null
        }

        const isPasswordValid = await bcrypt.compare(credentials.password, user.password)
        
        if (!isPasswordValid) {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', normalizedEmail)
          return null
        }
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email)

        return {
          id: user.id,
          phone: user.phone,
          email: user.email,
          name: user.name,
          image: user.image,
          role: user.role
        }
      }
    }),
    // –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É + SMS  
    CredentialsProvider({
      id: 'phone',
      name: 'Phone',
      credentials: {
        phone: { label: 'Phone', type: 'text' },
        code: { label: 'Code', type: 'text' }
      },
      async authorize(credentials) {
        console.log('üöÄ –í–´–ó–í–ê–ù –ü–†–û–í–ê–ô–î–ï–† PHONE')
        if (!credentials?.phone || !credentials?.code) {
          return null
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SMS –∫–æ–¥
        const isValidCode = await verifySMSCode(credentials.phone, credentials.code)
        if (!isValidCode) {
          return null
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        let phone = credentials.phone.replace(/\D/g, '')
        if (phone.startsWith('8')) {
          phone = '7' + phone.substring(1)
        }
        if (phone.length === 10) {
          phone = '7' + phone
        }
        const normalizedPhone = '+' + phone

        // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const { prisma } = await import('@/lib/db')
        let user = await prisma.user.findUnique({
          where: { phone: normalizedPhone }
        })
        
        if (!user) {
          user = await prisma.user.create({
            data: {
              phone: normalizedPhone,
              role: 'USER'
            }
          })
          console.log(`üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${normalizedPhone}`)
        }

        return {
          id: user.id,
          phone: user.phone,
          email: user.email,
          role: user.role
        }
      }
    }),

    // –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ email + –∫–æ–¥
    CredentialsProvider({
      id: 'email',
      name: 'Email',
      credentials: {
        email: { label: 'Email', type: 'email' },
        code: { label: 'Code', type: 'text' }
      },
      async authorize(credentials) {
        console.log('üöÄ –í–´–ó–í–ê–ù –ü–†–û–í–ê–ô–î–ï–† EMAIL')
        if (!credentials?.email || !credentials?.code) {
          return null
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º email –∫–æ–¥
        const isValidCode = await verifyEmailCode(credentials.email, credentials.code)
        if (!isValidCode) {
          return null
        }

        const normalizedEmail = credentials.email.toLowerCase()

        // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const { prisma } = await import('@/lib/db')
        let user = await prisma.user.findUnique({
          where: { email: normalizedEmail }
        })
        
        if (!user) {
          user = await prisma.user.create({
            data: {
              email: normalizedEmail,
              role: 'USER'
            }
          })
          console.log(`üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${normalizedEmail}`)
        }

        return {
          id: user.id,
          phone: user.phone,
          email: user.email,
          role: user.role
        }
      }
    }),

    // –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞
    CredentialsProvider({
      id: 'credentials',
      name: 'Admin',
      credentials: {
        phone: { label: 'Phone', type: 'text' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials) {
        console.log('üöÄ –í–´–ó–í–ê–ù –ü–†–û–í–ê–ô–î–ï–† CREDENTIALS (–ê–î–ú–ò–ù)')
        console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', credentials?.phone)
        console.log('üîë –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω:', credentials?.password ? '–î–ê' : '–ù–ï–¢')
        
        if (!credentials?.phone || !credentials?.password) {
          console.log('‚ùå –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—è')
          return null
        }

        // –ò—â–µ–º –∞–¥–º–∏–Ω–∞ –≤ –ë–î
        const { prisma } = await import('@/lib/db')
        const admin = await prisma.user.findUnique({
          where: { phone: credentials.phone }
        })
        
        console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞:', credentials.phone)
        
        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç
        if (!admin) {
          console.log('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', credentials.phone)
          return null
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        if (admin.role !== 'ADMIN') {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω:', admin.role)
          return null
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if (!admin.password) {
          console.log('‚ùå –£ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ')
          return null
        }
        
        let isPasswordValid = false
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏ –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
        if (admin.password.startsWith('$2a$') || admin.password.startsWith('$2b$')) {
          // –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º bcrypt
          const bcrypt = await import('bcryptjs')
          isPasswordValid = await bcrypt.compare(credentials.password, admin.password)
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è')
        } else {
          // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
          isPasswordValid = credentials.password === admin.password
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è')
        }
        
        if (!isPasswordValid) {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞:', credentials.phone)
          console.log('‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', credentials.password)
          console.log('‚ùå –ü–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ:', admin.password.substring(0, 10) + '...')
          return null
        }
        
        console.log('‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', admin.phone)

        return {
          id: admin.id,
          phone: admin.phone,
          email: admin.email,
          role: admin.role
        }
      }
    })
  ],

  session: {
    strategy: 'jwt',
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏
    maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
  },

  cookies: {
    sessionToken: {
      name: process.env.NODE_ENV === 'production' 
        ? '__Secure-next-auth.session-token'
        : 'next-auth.session-token',
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: process.env.NODE_ENV === 'production',
        domain: process.env.NODE_ENV === 'production' ? '.naken.store' : undefined
      }
    },
    state: {
      name: process.env.NODE_ENV === 'production' 
        ? '__Secure-next-auth.state'
        : 'next-auth.state',
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: process.env.NODE_ENV === 'production',
        domain: process.env.NODE_ENV === 'production' ? '.naken.store' : undefined,
        maxAge: 900 // 15 –º–∏–Ω—É—Ç
      }
    }
  },

  callbacks: {
    async signIn({ user, account, profile, email, credentials }) {
      console.log('üî• SignIn callback –≤—ã–∑–≤–∞–Ω:', { user, account, profile })
      
      // –ï—Å–ª–∏ —ç—Ç–æ Google OAuth
      if (account?.provider === 'google' && user.email) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
          const existingUser = await prisma.user.findUnique({
            where: { email: user.email },
            include: { accounts: true }
          })
          
          if (existingUser) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å —Å Google
            const googleAccount = existingUser.accounts.find(acc => acc.provider === 'google')
            
            if (!googleAccount) {
              // –°–≤—è–∑—ã–≤–∞–µ–º Google –∞–∫–∫–∞—É–Ω—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
              await prisma.account.create({
                data: {
                  userId: existingUser.id,
                  type: account.type,
                  provider: account.provider,
                  providerAccountId: account.providerAccountId,
                  access_token: account.access_token,
                  expires_at: account.expires_at,
                  token_type: account.token_type,
                  scope: account.scope,
                  id_token: account.id_token,
                  refresh_token: account.refresh_token
                }
              })
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google
              await prisma.user.update({
                where: { id: existingUser.id },
                data: {
                  name: user.name || existingUser.name,
                  image: user.image || existingUser.image
                }
              })
              
              console.log('‚úÖ Google –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', user.email)
            }
          }
          
          return true
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ Google –∞–∫–∫–∞—É–Ω—Ç–∞:', error)
          return true // –í—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥
        }
      }
      
      return true
    },
    
    async jwt({ token, user }) {
      // console.log('üî• JWT callback –≤—ã–∑–≤–∞–Ω:', { 
      //   token: { ...token, role: token.role || user?.role }, 
      //   user,
      //   hasRole: !!(token.role || user?.role)
      // })
      if (user) {
        token.role = user.role
        token.phone = user.phone
        token.email = user.email
      }
      return token
    },
    
    async session({ session, token }) {
      console.log('üî• Session callback –≤—ã–∑–≤–∞–Ω:', { 
        session, 
        token,
        tokenRole: token.role,
        willSetRole: !!token.role
      })
      if (token) {
        session.user.id = token.sub!
        session.user.role = token.role as string
        session.user.phone = token.phone as string
        session.user.email = token.email as string
      }
      return session
    }
  },

  pages: {
    signIn: '/auth/signin'
  }
} 