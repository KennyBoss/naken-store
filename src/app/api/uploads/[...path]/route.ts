import { NextRequest, NextResponse } from 'next/server';
import { readFileSync, existsSync } from 'fs';
import { join, extname } from 'path';

// –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const getMimeType = (filePath: string): string => {
  const ext = extname(filePath).toLowerCase();
  const mimeTypes: Record<string, string> = {
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.gif': 'image/gif',
    '.webp': 'image/webp',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.bmp': 'image/bmp',
  };
  return mimeTypes[ext] || 'application/octet-stream';
};

export async function GET(
  request: NextRequest,
  context: { params: Promise<{ path: string[] }> }
) {
  try {
    const params = await context.params;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è uploads
    let uploadsBasePath: string;
    
    if (process.env.NODE_ENV === 'production') {
      // –í production –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
      const possiblePaths = [
        process.env.UPLOADS_PATH,
        '/root/naken-store/public/uploads',
        join(process.cwd(), 'public', 'uploads'),
        join(process.cwd(), '..', 'public', 'uploads'), // –¥–ª—è standalone
      ].filter(Boolean) as string[];
      
      uploadsBasePath = possiblePaths.find(path => existsSync(path)) || possiblePaths[0];
    } else {
      uploadsBasePath = join(process.cwd(), 'public', 'uploads');
    }
    
    const filePath = join(uploadsBasePath, ...params.path);
    
    console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: ${filePath}`);
    console.log(`üìÅ –ë–∞–∑–∞ uploads: ${uploadsBasePath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!existsSync(filePath)) {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return new NextResponse('File not found', { status: 404 });
    }

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const fileBuffer = readFileSync(filePath);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    const mimeType = getMimeType(filePath);
    
    console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${filePath} (${mimeType})`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    return new NextResponse(fileBuffer, {
      status: 200,
      headers: {
        'Content-Type': mimeType,
        'Cache-Control': 'public, max-age=31536000, immutable',
        'Access-Control-Allow-Origin': '*',
      },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
} 