import { NextRequest, NextResponse } from 'next/server'
import { writeFile, mkdir } from 'fs/promises'
import { join } from 'path'
import { existsSync } from 'fs'
import { 
  rateLimit, 
  addSecurityHeaders, 
  validateFile,
  logSuspiciousActivity,
  getClientIP 
} from '@/lib/security'
import { 
  processImageForMasonry, 
  processImageKeepRatio,
  createThumbnail, 
  getRandomMasonrySize,
  MASONRY_SIZES,
  SIZE_LIMITS,
  type MasonrySizeKey 
} from '@/lib/image-processing'

// Rate limiting –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: 10 —Ñ–∞–π–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
const uploadRateLimit = rateLimit({
  maxRequests: 10,
  windowMs: 60 * 1000,
  keyGenerator: (req) => `upload:${getClientIP(req)}`
})

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    const rateLimitResult = uploadRateLimit(request)
    if (!rateLimitResult.success) {
      logSuspiciousActivity('rate_limit', {
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || undefined,
        path: '/api/upload'
      })
      
      return addSecurityHeaders(
        NextResponse.json(
          { error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤' },
          { status: 429 }
        )
      )
    }

    const data = await request.formData()
    const file: File | null = data.get('file') as unknown as File
    const sizePreference = data.get('sizePreference') as string | null
    const keepRatio = data.get('keepRatio') === 'true' // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π

    if (!file) {
      return addSecurityHeaders(
        NextResponse.json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 400 })
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (file.size > SIZE_LIMITS.maxFileSize) {
      return addSecurityHeaders(
        NextResponse.json({ 
          error: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${SIZE_LIMITS.maxFileSize / 1024 / 1024}MB` 
        }, { status: 400 })
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const fileValidation = validateFile(file)
    if (!fileValidation.isValid) {
      logSuspiciousActivity('invalid_token', {
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || undefined,
        path: '/api/upload',
        data: { 
          fileName: file.name,
          fileType: file.type,
          fileSize: file.size,
          errors: fileValidation.errors
        }
      })
      
      return addSecurityHeaders(
        NextResponse.json({ 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–∞–π–ª',
          details: fileValidation.errors
        }, { status: 400 })
      )
    }

    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ magic bytes
    const magicBytes = buffer.slice(0, 4)
    const validMagicBytes = [
      [0xFF, 0xD8, 0xFF], // JPEG
      [0x89, 0x50, 0x4E, 0x47], // PNG
      [0x52, 0x49, 0x46, 0x46], // WebP (RIFF)
    ]
    
    const isValidFile = validMagicBytes.some(magic => 
      magic.every((byte, index) => magicBytes[index] === byte)
    )
    
    if (!isValidFile) {
      logSuspiciousActivity('invalid_token', {
        ip: getClientIP(request),
        userAgent: request.headers.get('user-agent') || undefined,
        path: '/api/upload',
        data: { 
          fileName: file.name,
          suspiciousMagicBytes: Array.from(magicBytes)
        }
      })
      
      return addSecurityHeaders(
        NextResponse.json({ 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞' 
        }, { status: 400 })
      )
    }

    // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let processed: any
    let fileName: string
    
    if (keepRatio) {
      // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
      const result = await processImageKeepRatio(buffer)
      processed = {
        processedBuffer: result.processedBuffer,
        metadata: {
          ...result.metadata,
          sizeKey: 'original' // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
      const timestamp = Date.now()
      const randomString = Math.random().toString(36).substring(2, 15)
      fileName = `${timestamp}-${randomString}.jpg`
    } else {
      // –î–ª—è masonry –≥–∞–ª–µ—Ä–µ–∏ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ–¥ —Ä–∞–∑–º–µ—Ä—ã
      let sizeKey: MasonrySizeKey | undefined
      
      if (sizePreference && sizePreference in MASONRY_SIZES) {
        sizeKey = sizePreference as MasonrySizeKey
      } else if (sizePreference === 'random') {
        sizeKey = getRandomMasonrySize()
      }
      
      processed = await processImageForMasonry(buffer, sizeKey)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º
      const timestamp = Date.now()
      const randomString = Math.random().toString(36).substring(2, 15)
      fileName = `${timestamp}-${randomString}-${processed.metadata.sizeKey}.jpg`
    }

    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
    const thumbnailBuffer = await createThumbnail(processed.processedBuffer)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let uploadsRoot: string;
    
    if (process.env.NODE_ENV === 'production') {
      // –í production –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ standalone —Ä–µ–∂–∏–º
      const standaloneUploads = join(process.cwd(), '.next', 'standalone', 'public', 'uploads');
      const regularUploads = join(process.cwd(), 'public', 'uploads');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º standalone –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (existsSync(join(process.cwd(), '.next', 'standalone', 'public'))) {
        uploadsRoot = standaloneUploads;
        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º standalone —Ä–µ–∂–∏–º –¥–ª—è uploads:', uploadsRoot);
      } else {
        uploadsRoot = process.env.UPLOADS_PATH || regularUploads;
      }
    } else {
      uploadsRoot = join(process.cwd(), 'public', 'uploads');
    }

    const uploadsDir = uploadsRoot;
    const thumbnailsDir = join(uploadsDir, 'thumbnails');
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    try {
      if (!existsSync(uploadsDir)) {
        console.log(`Creating directory: ${uploadsDir}`);
        await mkdir(uploadsDir, { recursive: true });
      }
      if (!existsSync(thumbnailsDir)) {
        console.log(`Creating directory: ${thumbnailsDir}`);
        await mkdir(thumbnailsDir, { recursive: true });
      }
    } catch (dirError) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', dirError);
      return addSecurityHeaders(
        NextResponse.json({ 
          error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' 
        }, { status: 500 })
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
    const thumbnailName = fileName.replace('.jpg', '-thumb.jpg')
    
    const filePath = join(uploadsDir, fileName)
    const thumbnailPath = join(thumbnailsDir, thumbnailName)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    try {
      await writeFile(filePath, processed.processedBuffer)
      await writeFile(thumbnailPath, thumbnailBuffer)
    } catch (writeError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', writeError);
      // –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
      if (writeError instanceof Error && 'code' in writeError && writeError.code === 'EACCES') {
        console.error('–û–®–ò–ë–ö–ê EACCES: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é uploads.');
        return addSecurityHeaders(
          NextResponse.json({ 
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞.' 
          }, { status: 500 })
        );
      }
      return addSecurityHeaders(
        NextResponse.json({ 
          error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.' 
        }, { status: 500 })
      );
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const fileUrl = `/uploads/${fileName}`
    const thumbnailUrl = `/uploads/thumbnails/${thumbnailName}`
    
    return addSecurityHeaders(
      NextResponse.json({ 
        success: true, 
        url: fileUrl,
        thumbnailUrl: thumbnailUrl,
        fileName: fileName,
        originalName: file.name,
        metadata: {
          ...processed.metadata,
          originalSize: file.size,
          processedSize: processed.processedBuffer.length,
          compressionRatio: Math.round((1 - processed.processedBuffer.length / file.size) * 100)
        },
        availableSizes: Object.keys(MASONRY_SIZES).map(key => ({
          key,
          ...MASONRY_SIZES[key as MasonrySizeKey],
          isSelected: key === processed.metadata.sizeKey
        }))
      })
    )

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error)
    
    logSuspiciousActivity('failed_login', {
      ip: getClientIP(request),
      userAgent: request.headers.get('user-agent') || undefined,
      path: '/api/upload',
      data: { error: error instanceof Error ? error.message : 'Unknown error' }
    })
    
    return addSecurityHeaders(
      NextResponse.json({ 
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }, { status: 500 })
    )
  }
} 