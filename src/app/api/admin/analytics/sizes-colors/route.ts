import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'
import { startOfDay, endOfDay, subDays, format } from 'date-fns'

// GET /api/admin/analytics/sizes-colors - –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.role || session.user.role !== 'ADMIN') {
      return NextResponse.json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 })
    }

    const { searchParams } = new URL(request.url)
    const range = searchParams.get('range') || '30'
    const days = parseInt(range)
    
    const startDate = startOfDay(subDays(new Date(), days))
    const endDate = endOfDay(new Date())

    // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤
    const totalSizes = await prisma.size.count()
    const totalColors = await prisma.color.count()
    
    const activeSizes = await prisma.size.count({
      where: {
        products: {
          some: {
            product: {
              published: true
            }
          }
        }
      }
    })

    const activeColors = await prisma.color.count({
      where: {
        products: {
          some: {
            published: true
          }
        }
      }
    })

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã
    const allSizes = await prisma.size.findMany({
      select: {
        id: true,
        name: true,
        russianSize: true
      }
    })

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞  
    const allColors = await prisma.color.findMany({
      select: {
        id: true,
        name: true,
        hexCode: true
      }
    })

    // –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–ø–æ–∫–∞ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤)
    const sizePopularityData = allSizes.map(size => ({
      size: size.id,
      sizeName: size.name,
      russianSize: size.russianSize,
      orders: Math.floor(Math.random() * 50), // –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –≤—Ä–µ–º—è
      quantity: Math.floor(Math.random() * 200)
    }))

    const colorPopularityData = allColors.map(color => ({
      color: color.id,
      colorName: color.name,
      hexCode: color.hexCode,
      orders: Math.floor(Math.random() * 30), // –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –≤—Ä–µ–º—è
      quantity: Math.floor(Math.random() * 150)
    }))

    return NextResponse.json({
      period: {
        start: format(startDate, 'dd.MM.yyyy'),
        end: format(endDate, 'dd.MM.yyyy'),
        days
      },
      summary: {
        totalSizes,
        totalColors,
        activeSizes,
        activeColors
      },
      sizePopularity: sizePopularityData,
      colorPopularity: colorPopularityData
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
} 