import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

export async function POST(request: NextRequest) {
  console.log('üî• –¢–ï–°–¢–û–í–´–ô API –í–´–ó–í–ê–ù!')
  
  try {
    const body = await request.json()
    console.log('üìû –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', body)
    
    const { phone, password } = body
    
    if (!phone || !password) {
      console.log('‚ùå –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—è')
      return NextResponse.json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' }, { status: 400 })
    }
    
    // –ò—â–µ–º –∞–¥–º–∏–Ω–∞ –≤ –ë–î
    const admin = await prisma.user.findUnique({
      where: { phone }
    })
    
    console.log('üîç –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω:', admin ? '–î–ê' : '–ù–ï–¢')
    
    if (!admin) {
      console.log('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', phone)
      return NextResponse.json({ error: '–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }
    
    console.log('üìã –†–æ–ª—å:', admin.role)
    console.log('üîë –ü–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ:', admin.password ? admin.password.substring(0, 10) + '...' : '–ù–ï–¢')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    if (admin.role !== 'ADMIN') {
      console.log('‚ùå –ù–µ –∞–¥–º–∏–Ω:', admin.role)
      return NextResponse.json({ error: '–ù–µ –∞–¥–º–∏–Ω' }, { status: 403 })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    let isValid = false
    
    if (admin.password?.startsWith('$2a$') || admin.password?.startsWith('$2b$')) {
      console.log('üîç –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å')
      const bcrypt = await import('bcryptjs')
      isValid = await bcrypt.compare(password, admin.password)
    } else {
      console.log('üîç –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
      isValid = password === admin.password
    }
    
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π:', isValid)
    
    if (!isValid) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
      return NextResponse.json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
        debug: {
          –≤–≤–µ–¥–µ–Ω–Ω—ã–π: password,
          –≤–ë–∞–∑–µ: admin.password?.substring(0, 10) + '...'
        }
      }, { status: 401 })
    }
    
    console.log('üéâ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!')
    
    return NextResponse.json({ 
      success: true,
      admin: {
        id: admin.id,
        phone: admin.phone,
        role: admin.role
      }
    })
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º API:', error)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
} 