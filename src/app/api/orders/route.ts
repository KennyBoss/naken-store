import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'
import { sendEmail } from '@/lib/email'
import { emailTemplates } from '@/lib/email-templates'

// GET /api/orders - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      )
    }

    const orders = await prisma.order.findMany({
      where: { userId: session.user.id },
      include: {
        items: {
          include: {
            product: true
          }
        },
        shippingAddress: true
      },
      orderBy: { createdAt: 'desc' }
    })

    return NextResponse.json(orders)

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

// POST /api/orders - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      )
    }

    const {
      items,
      address,
      shippingMethod,
      paymentMethod,
      notes
    } = await request.json()

    if (!items || items.length === 0) {
      return NextResponse.json(
        { error: '–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π' },
        { status: 400 }
      )
    }

    if (!address || !address.street || !address.city) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏' },
        { status: 400 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∞–¥—Ä–µ—Å
    let addressRecord = await prisma.address.findFirst({
      where: {
        userId: session.user.id,
        street: address.street,
        city: address.city,
        zipCode: address.zipCode || ''
      }
    })

    if (!addressRecord) {
      addressRecord = await prisma.address.create({
        data: {
          userId: session.user.id,
          name: `${address.firstName} ${address.lastName}`,
          street: address.street,
          city: address.city,
          state: address.state || '',
          zipCode: address.zipCode || '',
          country: address.country || '–†–æ—Å—Å–∏—è',
          phone: address.phone || ''
        }
      })
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    let total = 0
    const orderItems = []

    for (const item of items) {
      const product = await prisma.product.findUnique({
        where: { id: item.productId }
      })

      if (!product) {
        return NextResponse.json(
          { error: `–¢–æ–≤–∞—Ä —Å ID ${item.productId} –Ω–µ –Ω–∞–π–¥–µ–Ω` },
          { status: 404 }
        )
      }

      const price = product.salePrice || product.price
      const itemTotal = price * item.quantity
      total += itemTotal

      orderItems.push({
        productId: item.productId,
        quantity: item.quantity,
        price: price,
        size: item.size || null,
        color: item.color || null
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    const shippingFee = shippingMethod === 'express' ? 500 : 0
    total += shippingFee

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.create({
      data: {
        orderNumber,
        userId: session.user.id,
        shippingAddressId: addressRecord.id,
        status: 'PENDING',
        total,

        items: {
          create: orderItems
        }
      },
              include: {
        items: {
          include: {
            product: true
          }
        },
        shippingAddress: true
      }
    })

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.cartItem.deleteMany({
      where: { userId: session.user.id }
    })

    // üìß Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ webhook
    console.log(`üìã –ó–∞–∫–∞–∑ ${orderNumber} —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã...`)

    return NextResponse.json({
      success: true,
      order,
      message: `–ó–∞–∫–∞–∑ ${orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
} 