import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'
import { sendEmail } from '@/lib/email'
import { emailTemplates } from '@/lib/email-templates'

// PATCH /api/orders/[id]/status - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
export async function PATCH(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      select: { role: true }
    })

    if (user?.role !== 'ADMIN') {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' },
        { status: 403 }
      )
    }

    const { status, statusMessage } = await request.json()
    const { id } = await context.params

    if (!status) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const validStatuses = ['PENDING', 'CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED']
    if (!validStatuses.includes(status)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' },
        { status: 400 }
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.update({
      where: { id },
      data: { status },
      include: {
        user: {
          select: { name: true, email: true }
        },
        items: {
          include: {
            product: true
          }
        },
        shippingAddress: true
      }
    })

    // üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
    try {
      if (order.user?.email) {
        const statusMessages: Record<string, string> = {
          PENDING: '–í–∞—à –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
          CONFIRMED: '–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É',
          PROCESSING: '–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
          SHIPPED: '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
          DELIVERED: '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
          CANCELLED: '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
        }

        const emailData = emailTemplates.orderStatusUpdate({
          orderNumber: order.orderNumber,
          customerName: order.user.name || '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
          status: statusMessages[status] || status,
          statusMessage: statusMessage || statusMessages[status] || '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω'
        })

        await sendEmail(
          order.user.email,
          emailData.subject,
          emailData.html
        )

        console.log(`‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber}`)
      }
    } catch (emailError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', emailError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ email
    }

    return NextResponse.json({
      success: true,
      order,
      message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
} 