import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'
import { telegramBot } from '@/lib/telegram'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    const { customerPhone, customerName, customerAddress, comment } = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!customerPhone || !customerName || !customerAddress) {
      return NextResponse.json(
        { error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' },
        { status: 400 }
      )
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = `QO-${Date.now()}`

    let userId = null
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
    if (session?.user?.id) {
      userId = session.user.id
    } else {
      // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
      let user = await prisma.user.findUnique({
        where: { phone: customerPhone }
      })

      if (!user) {
        user = await prisma.user.create({
          data: {
            phone: customerPhone,
            name: customerName,
          }
        })
      }
      
      userId = user.id
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞
    const address = await prisma.address.create({
      data: {
        name: '–ê–¥—Ä–µ—Å –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞',
        street: customerAddress,
        city: '', // –ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ –∞–¥—Ä–µ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        state: '',
        zipCode: '',
        country: '–†–æ—Å—Å–∏—è',
        phone: customerPhone,
        userId: userId,
      }
    })

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.create({
      data: {
        orderNumber,
        userId,
        shippingAddressId: address.id,
        total: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        status: 'PENDING',
      }
    })

    // üöÄ TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—ã—Å—Ç—Ä–æ–º –∑–∞–∫–∞–∑–µ
    try {
      await telegramBot.sendOrderNotification({
        orderNumber: order.orderNumber,
        customerName: customerName,
        customerPhone: customerPhone,
        total: 0, // –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å—É–º–º—ã
        items: [{
          productName: '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ (—Ç–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã)',
          quantity: 1,
          price: 0
        }],
        address: customerAddress,
        paymentMethod: '–ù–µ —É–∫–∞–∑–∞–Ω',
        shippingMethod: '–ù–µ —É–∫–∞–∑–∞–Ω'
      })
    } catch (telegramError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—ã—Å—Ç—Ä–æ–º –∑–∞–∫–∞–∑–µ:', telegramError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ:
    // 1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    // 2. –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ CRM —Å–∏—Å—Ç–µ–º–µ
    // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

    console.log(`–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${orderNumber}`)
    console.log(`–ö–ª–∏–µ–Ω—Ç: ${customerName}, ${customerPhone}`)
    console.log(`–ê–¥—Ä–µ—Å: ${customerAddress}`)
    if (comment) {
      console.log(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`)
    }

    return NextResponse.json({
      success: true,
      order: {
        id: order.id,
        orderNumber: order.orderNumber,
        customerName,
        customerPhone,
        customerAddress,
        comment
      },
      message: '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞' },
      { status: 500 }
    )
  }
} 