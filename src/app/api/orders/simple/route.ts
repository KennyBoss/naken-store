import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { telegramBot } from '@/lib/telegram'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    const data = await request.json()

    const { items, address, shippingMethod, paymentMethod, comment, totalAmount } = data

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!items || items.length === 0 || !address || !totalAmount) {
      return NextResponse.json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' }, { status: 400 })
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const newOrder = await prisma.$transaction(async (tx) => {
      // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
      let validUserId = null
      if (session?.user?.id) {
        const userExists = await tx.user.findUnique({
          where: { id: session.user.id }
        })
        if (userExists) {
          validUserId = session.user.id
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const orderNumber = `SIMPLE-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const orderData: any = {
        orderNumber,
        total: totalAmount,
        status: 'PENDING',
        shippingMethod,
        paymentMethod,
        comment,
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ –Ω–µ–º—É
      if (validUserId) {
        orderData.user = {
          connect: { id: validUserId }
        }
        // –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        orderData.shippingAddress = {
          create: {
            name: address.fullName,
            street: address.street,
            city: address.city || '–ù–µ —É–∫–∞–∑–∞–Ω',
            state: address.state || '',
            zipCode: address.zipCode || '',
            country: address.country || '–†–æ—Å—Å–∏—è',
            phone: address.phone,
            user: {
              connect: { id: validUserId }
            }
          }
        }
      } else {
        // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –ø—Ä—è–º–æ –≤ –∑–∞–∫–∞–∑–µ
        orderData.comment = `${comment || ''}\n\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n${address.fullName}\n${address.street}\n${address.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–¢–µ–ª: ${address.phone}`
      }

      const order = await tx.order.create({
        data: orderData,
        include: {
          shippingAddress: true,
          user: {
            select: { name: true, phone: true, email: true }
          }
        }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
      const orderItems = []
      const orderItemsForTelegram = []

      for (const item of items) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        const product = await tx.product.findUnique({
          where: { id: item.productId }
        })

        orderItems.push({
          orderId: order.id,
          productId: item.productId,
          quantity: item.quantity,
          price: item.price
        })

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
        orderItemsForTelegram.push({
          productName: product?.name || `–¢–æ–≤–∞—Ä ID: ${item.productId}`,
          quantity: item.quantity,
          price: item.price
        })
      }

      await tx.orderItem.createMany({
        data: orderItems
      })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
      for (const item of items) {
        await tx.product.update({
          where: { id: item.productId },
          data: {
            stock: {
              decrement: item.quantity
            }
          }
        })
      }

      // üöÄ TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ—Å—Ç–æ–º –∑–∞–∫–∞–∑–µ
      try {
        const fullAddress = validUserId && order.shippingAddress 
          ? `${order.shippingAddress.street}, ${order.shippingAddress.city}${order.shippingAddress.state ? `, ${order.shippingAddress.state}` : ''}${order.shippingAddress.zipCode ? `, ${order.shippingAddress.zipCode}` : ''}`
          : `${address.street}, ${address.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}`

        await telegramBot.sendOrderNotification({
          orderNumber: order.orderNumber,
          customerName: order.user?.name || address.fullName,
          customerPhone: order.user?.phone || address.phone,
          customerEmail: order.user?.email || undefined,
          total: order.total,
          items: orderItemsForTelegram,
          address: fullAddress,
          paymentMethod: paymentMethod || undefined,
          shippingMethod: shippingMethod || undefined
        })
      } catch (telegramError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ç–æ–º –∑–∞–∫–∞–∑–µ:', telegramError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram
      }

      return order
    })

    // TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –∏ –∞–¥–º–∏–Ω—É

    return NextResponse.json({ 
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 
      order: newOrder 
    }, { status: 201 })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
} 