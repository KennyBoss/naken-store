import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { verifyTBankNotification } from '@/lib/tbank'
import { addSecurityHeaders } from '@/lib/security'
import { sendEmail } from '@/lib/email'
import { emailTemplates } from '@/lib/email-templates'

export async function POST(request: NextRequest) {
  try {
    const notification = await request.json()
    
    console.log('T-Bank notification received:', notification)

    const password = process.env.TBANK_PASSWORD
    if (!password) {
      console.error('T-Bank password not configured')
      return NextResponse.json('ERROR', { status: 500 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const isValid = verifyTBankNotification({ ...notification }, password)
    
    if (!isValid) {
      console.error('Invalid T-Bank notification signature')
      return NextResponse.json('ERROR', { status: 400 })
    }

    const { Status, PaymentId, OrderId, Amount } = notification

    if (!OrderId) {
      console.error('Missing OrderId in T-Bank notification')
      return NextResponse.json('ERROR', { status: 400 })
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const order = await prisma.order.findUnique({
      where: { id: OrderId },
      include: {
        user: { select: { name: true, email: true } },
        items: { include: { product: true } },
        shippingAddress: true
      }
    })

    if (!order) {
      console.error('Order not found:', OrderId)
      return NextResponse.json('ERROR', { status: 404 })
    }

    console.log(`T-Bank notification for order ${OrderId}: status=${Status}, paymentId=${PaymentId}`)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    let newOrderStatus = order.status
    let newPaymentStatus = 'PENDING'
    let shouldSendEmail = false

    switch (Status) {
      case 'CONFIRMED': // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
        newOrderStatus = 'PROCESSING'
        newPaymentStatus = 'PAID'
        shouldSendEmail = true
        console.log(`‚úÖ Payment confirmed for order ${OrderId}`)
        break
        
      case 'AUTHORIZED': // –ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–¥–ª—è –¥–≤—É—Ö—Å—Ç–∞–¥–∏–π–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
        newOrderStatus = 'PROCESSING'
        newPaymentStatus = 'PAID'
        shouldSendEmail = true
        console.log(`‚úÖ Payment authorized for order ${OrderId}`)
        break
        
      case 'CANCELED': // –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
        newPaymentStatus = 'CANCELLED'
        console.log(`‚ùå Payment cancelled for order ${OrderId}`)
        break
        
      case 'REJECTED': // –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω
        newPaymentStatus = 'FAILED'
        console.log(`‚ùå Payment rejected for order ${OrderId}`)
        break
        
      case 'DEADLINE_EXPIRED': // –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞
        newPaymentStatus = 'EXPIRED'
        console.log(`‚è∞ Payment expired for order ${OrderId}`)
        break
        
      default:
        console.log(`‚ùì Unknown payment status for order ${OrderId}: ${Status}`)
        // –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        return NextResponse.json('OK', { status: 200 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
    const updateData: any = {
      updatedAt: new Date(),
      comment: order.comment ? 
        `${order.comment}; T-Bank: ${Status} (${PaymentId})` : 
        `T-Bank: ${Status} (${PaymentId})`
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (newOrderStatus !== order.status) {
      updateData.status = newOrderStatus
    }

    // TODO: –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
    // updateData.paymentStatus = newPaymentStatus
    // updateData.paymentData = JSON.stringify({
    //   ...JSON.parse(order.paymentData || '{}'),
    //   lastStatus: Status,
    //   lastUpdate: new Date().toISOString()
    // })

    await prisma.order.update({
      where: { id: OrderId },
      data: updateData
    })

    console.log(`üìã Order ${OrderId} updated: ${order.status} ‚Üí ${newOrderStatus}, payment: ${newPaymentStatus}`)
      
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    if (shouldSendEmail && order.user?.email) {
      try {
        const emailData = emailTemplates.orderConfirmation({
          orderNumber: order.orderNumber,
          customerName: order.user.name || '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
          items: order.items.map(item => ({
            name: item.product.name,
            quantity: item.quantity,
            price: item.price
          })),
          total: order.total,
          shippingAddress: order.shippingAddress ? 
            `${order.shippingAddress.street}, ${order.shippingAddress.city}` : 
            '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
          paymentMethod: 'T-Bank (–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞)'
        })

        await sendEmail(
          order.user.email,
          emailData.subject,
          emailData.html
        )

        console.log(`‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.orderNumber} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã`)
      } catch (emailError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:', emailError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ email
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    return addSecurityHeaders(
      NextResponse.json('OK')
    )

  } catch (error) {
    console.error('T-Bank notification processing error:', error)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ERROR —á—Ç–æ–±—ã T-Bank –ø–æ–≤—Ç–æ—Ä–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    return NextResponse.json('ERROR', { status: 500 })
  }
} 