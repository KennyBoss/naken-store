import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/db'
import { createTBankPayment } from '@/lib/tbank'
import { addSecurityHeaders } from '@/lib/security'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    const body = await request.json()
    
    const { orderId, amount, customerEmail, customerPhone } = body

    if (!orderId || !amount) {
      return addSecurityHeaders(
        NextResponse.json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' }, { status: 400 })
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        user: true,
        items: {
          include: {
            product: true
          }
        }
      }
    })

    if (!order) {
      return addSecurityHeaders(
        NextResponse.json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    if (session && order.userId && order.userId !== session.user.id) {
      return addSecurityHeaders(
        NextResponse.json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 })
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
    if (order.status === 'DELIVERED' || order.status === 'PROCESSING') {
      return addSecurityHeaders(
        NextResponse.json({ error: '–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω' }, { status: 400 })
      )
    }

    console.log('Creating T-Bank payment for order:', orderId, 'amount from body:', amount, 'order.total:', order.total)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è —á–µ–∫–∞
    const orderItems = order.items.map(item => ({
      name: item.product.name,
      price: item.price,
      quantity: item.quantity
    }))

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –æ–±—â–µ–π —Å—É–º–º–æ–π –∏ —Å—É–º–º–æ–π —Ç–æ–≤–∞—Ä–æ–≤)
    const itemsTotal = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0)
    const shippingCost = order.total - itemsTotal
    
    console.log(`üí∞ –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞: —Ç–æ–≤–∞—Ä—ã=${itemsTotal}‚ÇΩ, –¥–æ—Å—Ç–∞–≤–∫–∞=${shippingCost}‚ÇΩ, –∏—Ç–æ–≥–æ=${order.total}‚ÇΩ`)

    // üêõ FIX: –ò—Å–ø–æ–ª—å–∑—É–µ–º order.total –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ amount –∏–∑ body
    const correctAmount = order.total
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º order.total=${correctAmount}‚ÇΩ –≤–º–µ—Å—Ç–æ amount=${amount}`)

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ T-Bank
    const payment = await createTBankPayment(
      correctAmount,
      orderId,
      customerEmail || order.user?.email,
      orderItems,
      customerPhone || order.user?.phone || undefined,
      shippingCost > 0 ? shippingCost : undefined
    )

    if (!payment.Success || !payment.PaymentURL) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${payment.Message}`)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
    try {
      await prisma.order.update({
        where: { id: orderId },
        data: {
          // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ comment –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
          comment: `T-Bank PaymentId: ${payment.PaymentId}`,
          // TODO: –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
          // paymentId: payment.PaymentId,
          // paymentMethod: 'tbank', 
          // paymentStatus: 'PENDING'
        }
      })
      console.log(`üíæ –ó–∞–∫–∞–∑ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω —Å paymentId: ${payment.PaymentId}`)
    } catch (dbError) {
      console.error('Failed to update order with payment info:', dbError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }

    console.log('T-Bank payment created successfully:', payment.PaymentId)

    return addSecurityHeaders(
      NextResponse.json({
        success: true,
        paymentId: payment.PaymentId,
        paymentUrl: payment.PaymentURL,
        message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      })
    )

  } catch (error) {
    console.error('T-Bank payment creation error:', error)
    
    return addSecurityHeaders(
      NextResponse.json({ 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
      }, { status: 500 })
    )
  }
} 