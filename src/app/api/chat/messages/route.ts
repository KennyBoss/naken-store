import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { telegramBot } from '@/lib/telegram'

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    const body = await request.json()
    const { sessionId, content, messageType = 'TEXT', attachments } = body

    if (!sessionId || !content) {
      return NextResponse.json(
        { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç-—Å–µ—Å—Å–∏–∏
    const chatSession = await prisma.chatSession.findUnique({
      where: { sessionId },
      include: { user: true }
    })

    if (!chatSession) {
      return NextResponse.json(
        { success: false, error: '–ß–∞—Ç-—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      )
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    let senderType = 'USER'
    let isFromUser = true
    if (session?.user?.role === 'ADMIN') {
      senderType = 'ADMIN'
      isFromUser = false
    }

    const senderName = session?.user?.name || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = await prisma.chatMessage.create({
      data: {
        content: content.trim(),
        sessionId: chatSession.id,
        senderId: session?.user?.id || null,
        senderType: senderType as any,
        senderName: senderName,
        messageType: messageType as any,
        attachments: attachments ? JSON.stringify(attachments) : null
      },
      include: {
        sender: {
          select: { id: true, name: true, image: true }
        }
      }
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–µ—Å—Å–∏–∏
    await prisma.chatSession.update({
      where: { id: chatSession.id },
      data: { 
        lastActivity: new Date(),
        updatedAt: new Date()
      }
    })

    // üöÄ TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (messageType !== 'SYSTEM') {
        await telegramBot.sendChatNotification({
          sessionId: chatSession.sessionId,
          senderName: senderName,
          message: content.trim(),
          isFromUser: isFromUser,
          timestamp: new Date()
        })
      }
    } catch (telegramError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', telegramError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram
    }

    return NextResponse.json({
      success: true,
      message: message
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' },
      { status: 500 }
    )
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const sessionId = searchParams.get('sessionId')
    const lastMessageId = searchParams.get('lastMessageId')
    const limit = parseInt(searchParams.get('limit') || '50')

    if (!sessionId) {
      return NextResponse.json(
        { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const chatSession = await prisma.chatSession.findUnique({
      where: { sessionId }
    })

    if (!chatSession) {
      return NextResponse.json(
        { success: false, error: '–ß–∞—Ç-—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      )
    }

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const whereClause: any = {
      sessionId: chatSession.id
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
    if (lastMessageId) {
      whereClause.id = {
        gt: lastMessageId
      }
    }

    const messages = await prisma.chatMessage.findMany({
      where: whereClause,
      orderBy: { createdAt: 'asc' },
      take: limit,
      include: {
        sender: {
          select: { id: true, name: true, image: true }
        }
      }
    })

    return NextResponse.json({
      success: true,
      messages: messages
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error)
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π' },
      { status: 500 }
    )
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
export async function PATCH(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    const body = await request.json()
    const { sessionId, messageIds } = body

    if (!sessionId) {
      return NextResponse.json(
        { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const chatSession = await prisma.chatSession.findUnique({
      where: { sessionId }
    })

    if (!chatSession) {
      return NextResponse.json(
        { success: false, error: '–ß–∞—Ç-—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è
    const whereClause: any = {
      sessionId: chatSession.id,
      isRead: false
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageIds && Array.isArray(messageIds)) {
      whereClause.id = { in: messageIds }
    }

    await prisma.chatMessage.updateMany({
      where: whereClause,
      data: {
        isRead: true,
        readAt: new Date()
      }
    })

    return NextResponse.json({
      success: true,
      message: '–°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω'
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è:', error)
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' },
      { status: 500 }
    )
  }
} 