#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
function truncateDescription(description, maxLength = 200) {
  if (!description) return '';
  const cleaned = description.replace(/\s+/g, ' ').trim();
  if (cleaned.length <= maxLength) return cleaned;
  
  const truncated = cleaned.substring(0, maxLength);
  const lastSpace = truncated.lastIndexOf(' ');
  return truncated.substring(0, lastSpace) + '...';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug
function createSlug(name, wbId) {
  const slug = name.toLowerCase()
    .replace(/[–∞-—è]/g, (char) => {
      const map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
      };
      return map[char] || char;
    })
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim('-');
  
  return `${slug}-${wbId}`;
}

// –ü–∞—Ä—Å–∏–Ω–≥ TSV
function parseTSVLine(line) {
  const fields = line.split('\t');
  return {
    type: fields[0],
    slug: fields[1],
    wbId: fields[2],
    name: fields[3],
    category: fields[4],
    brand: fields[5],
    description: fields[6],
    images: fields[7] ? fields[7].split(';').slice(0, 3) : [],
    video: fields[8],
    gender: fields[9],
    material: fields[10],
    color: fields[11],
    barcode: fields[12],
    size: fields[13],
    sizeNumber: fields[14]
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞)
function getColorName(colorStr) {
  if (!colorStr) return null;
  const cleaned = colorStr.toLowerCase().trim();
  
  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç –¥–æ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
  const firstColor = cleaned.split(';')[0].trim();
  
  const colorMap = {
    '—Å–µ—Ä—ã–π': '—Å–µ—Ä—ã–π',
    '—á–µ—Ä–Ω—ã–π': '—á–µ—Ä–Ω—ã–π', 
    '–±–µ–ª—ã–π': '–±–µ–ª—ã–π',
    '–±–µ–∂–µ–≤—ã–π': '–±–µ–∂–µ–≤—ã–π',
    '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π',
    '—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π': '—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π',
    '–º–æ–ª–æ—á–Ω—ã–π': '–º–æ–ª–æ—á–Ω—ã–π'
  };
  
  return colorMap[firstColor] || null;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
function getSizeName(sizeStr) {
  if (!sizeStr) return null;
  const cleaned = sizeStr.trim().toUpperCase();
  
  if (['XS', 'S', 'M', 'L', 'XL', 'XXL'].includes(cleaned)) {
    return cleaned;
  }
  
  return null;
}

async function importProducts() {
  console.log('üöÄ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ NAKEN (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)...');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
    const file1 = fs.readFileSync('1.md', 'utf8');
    const file2 = fs.readFileSync('2.md', 'utf8');
    
    const lines = [...file1.split('\n'), ...file2.split('\n')]
      .filter(line => line.trim() && !line.startsWith('#'));
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –ü–∞—Ä—Å–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const parsedItems = lines.map(parseTSVLine)
      .filter(item => item.wbId && !item.wbId.includes('http')) // –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä —Å URL
      .filter(item => item.name && item.name !== '–ú—É–∂—Å–∫–æ–π'); // –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    
    console.log(`‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${parsedItems.length} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ WB ID
    const products = {};
    parsedItems.forEach(item => {
      if (!products[item.wbId]) {
        products[item.wbId] = {
          wbId: item.wbId,
          name: item.name,
          description: item.description,
          category: item.category,
          variants: []
        };
      }
      
      products[item.wbId].variants.push({
        color: getColorName(item.color),
        size: getSizeName(item.size),
        barcode: item.barcode
      });
    });
    
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${Object.keys(products).length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã
    const existingColors = await prisma.color.findMany();
    const existingSizes = await prisma.size.findMany();
    
    console.log(`üé® –¶–≤–µ—Ç–æ–≤ –≤ –ë–î: ${existingColors.length}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä–æ–≤ –≤ –ë–î: ${existingSizes.length}`);
    
    let createdCount = 0;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    for (const [wbId, productData] of Object.entries(products)) {
      console.log(`\nüì¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä: ${productData.name} (${wbId})`);
      
      // –°–æ–∫—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      const shortDescription = truncateDescription(productData.description, 200);
      
      // –°–æ–∑–¥–∞–µ–º slug
      const slug = createSlug(productData.name, wbId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç
      const colorName = productData.variants.find(v => v.color)?.color;
      let colorId = null;
      
      if (colorName) {
        const color = existingColors.find(c => c.name.toLowerCase().includes(colorName.toLowerCase()));
        colorId = color?.id;
        console.log(`üé® –¶–≤–µ—Ç: ${colorName} -> ${colorId ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      }
      
      try {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä (–ò–°–ü–†–ê–í–õ–ï–ù–û: images –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ JSON)
        const product = await prisma.product.create({
          data: {
            name: productData.name,
            slug: slug,
            description: shortDescription,
            price: 1800,
            sku: `NAKEN-${wbId}`,
            stock: 100,
            images: JSON.stringify(["/images/placeholder.jpg"]), // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!
            published: true,
            colorId: colorId
          }
        });
        
        console.log(`‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω: ${product.id}`);
        
        // –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
        const uniqueSizes = [...new Set(productData.variants.map(v => v.size).filter(Boolean))];
        
        for (const sizeName of uniqueSizes) {
          const size = existingSizes.find(s => s.name === sizeName);
          if (size) {
            try {
              await prisma.productSize.create({
                data: {
                  productId: product.id,
                  sizeId: size.id
                }
              });
              console.log(`üìè –†–∞–∑–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: ${sizeName}`);
            } catch (error) {
              if (error.code !== 'P2002') {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ ${sizeName}:`, error.message);
              }
            }
          } else {
            console.log(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sizeName}`);
          }
        }
        
        createdCount++;
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${wbId}:`, error.message);
      }
    }
    
    console.log(`\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${createdCount}`);
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫
importProducts(); 