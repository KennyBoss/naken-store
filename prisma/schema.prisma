// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  phone         String?   @unique  // –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  phoneVerified DateTime?
  password      String?   // –¥–ª—è email/password –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // –û—Ç–Ω–æ—à–µ–Ω–∏—è
  accounts     Account[]
  sessions     Session[]
  orders       Order[]
  cart         CartItem[]
  reviews      Review[]
  addresses    Address[]
  wishlist     WishlistItem[]
  authLogs     AuthLog[]
  activities   UserActivity[]
  
  // –ß–∞—Ç-—Å–∏—Å—Ç–µ–º–∞
  chatSessions    ChatSession[]     // –ß–∞—Ç—ã –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–µ–Ω—Ç
  assignedChats   ChatSession[]     @relation("AssignedChats") // –ß–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É/–º–µ–Ω–µ–¥–∂–µ—Ä—É
  sentMessages    ChatMessage[]     // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

  @@map("users")
}

model Size {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "S", "M", "L"
  russianSize String    @unique // e.g., "46", "48", "50"
  products    ProductSize[]
  createdAt   DateTime  @default(now())

  @@map("sizes")
}

model Color {
  id        String    @id @default(cuid())
  name      String    @unique // e.g., "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π"
  hexCode   String    @unique // e.g., "#FF0000", "#0000FF"
  products  Product[]
  createdAt DateTime  @default(now())

  @@map("colors")
}

// –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ –º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º –º–µ–∂–¥—É Product –∏ Size
model ProductSize {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId    String
  size      Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  stock     Int      @default(0) // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  
  @@unique([productId, sizeId])
  @@map("product_sizes")
}

// NextAuth.js –º–æ–¥–µ–ª–∏
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// –¢–æ–≤–∞—Ä—ã
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String?  @unique // SEO-friendly URL
  description String?
  
  // üöÄ SEO –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
  seoTitle    String?  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π title –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
  seoKeywords String?  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  faq         String?  // JSON –º–∞—Å—Å–∏–≤ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤
  views       Int      @default(0) // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
  
  price       Float
  salePrice   Float?
  sku         String   @unique
  stock       Int      @default(0)
  images      String   // JSON –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  
  // –°–≤—è–∑–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ —Ü–≤–µ—Ç–æ–º
  sizes       ProductSize[]  // –ú–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
  colorId     String?
  color       Color?   @relation(fields: [colorId], references: [id])
  
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // –û—Ç–Ω–æ—à–µ–Ω–∏—è
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  wishlist    WishlistItem[]

  @@map("products")
}

// –ö–æ—Ä–∑–∏–Ω–∞
model CartItem {
  id        String @id @default(cuid())
  quantity  Int    @default(1)
  sizeId    String? // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  createdAt DateTime @default(now())
  
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  
  @@unique([userId, productId, sizeId])
  @@map("cart_items")
}

// –ó–∞–∫–∞–∑—ã
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      String      @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELED
  total       Float
  
  // –°—Ç–∞—Ç—É—Å –∏ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?   // ID –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  paymentMethod String?   // tbank, yookassa, cash
  paymentData   String?   // JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞
  
  shippingMethod String?
  comment        String?

  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  
  items       OrderItem[]

  // –°–≤—è–∑—å —Å –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
  shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id], onDelete: SetNull)
  shippingAddressId String?

  @@map("orders")
}

// –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  size      String? // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
  color     String? // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("order_items")
}

// –ê–¥—Ä–µ—Å–∞
model Address {
  id        String    @id @default(cuid())
  name      String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  phone     String?
  isDefault Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  orders    Order[]

  @@map("addresses")
}

// –û—Ç–∑—ã–≤—ã
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  
  @@unique([userId, productId])
  @@map("reviews")
}

// –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  
  @@unique([userId, productId])
  @@map("wishlist_items")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING    // –ñ–¥–µ—Ç –æ–ø–ª–∞—Ç—ã
  PAID       // –û–ø–ª–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
  FAILED     // –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
  CANCELLED  // –û—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  EXPIRED    // –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ
}

// –ö–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (SMS/Email)
model AuthCode {
  id        String   @id @default(cuid())
  type      String   // "SMS" –∏–ª–∏ "EMAIL"
  contact   String   // —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email
  code      String   // –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  expires   DateTime // –∫–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç
  used      Boolean  @default(false) // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ –∫–æ–¥
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  @@map("auth_codes")
}

// –õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
model AuthLog {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  type        String   // "SMS", "EMAIL"
  identifier  String   // —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email
  success     Boolean  @default(false)
  errorReason String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@map("auth_logs")
}

// –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   // 'page_view', 'product_view', 'add_to_cart', 'order'
  details   String?  // JSON —Å –¥–µ—Ç–∞–ª—è–º–∏
  createdAt DateTime @default(now())
  
  @@map("user_activities")
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique // 'site_title', 'site_description', 'site_logo'
  value       String   // –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  type        String   @default("text") // 'text', 'file', 'image'
  category    String   @default("general") // 'general', 'seo', 'branding'
  description String?  // –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("site_settings")
}

// –¢—Ä–µ–∫–∏–Ω–≥ –ø–∏–∫—Å–µ–ª–∏ –∏ —Å—á–µ—Ç—á–∏–∫–∏
model TrackingPixel {
  id          String      @id @default(cuid())
  name        String      // –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π")
  type        PixelType   // –¢–∏–ø –ø–∏–∫—Å–µ–ª—è
  pixelId     String      // ID –ø–∏–∫—Å–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "3663988" –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏)
  code        String?     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ (–¥–ª—è custom HTML/JS)
  isActive    Boolean     @default(true)
  placement   PixelPlacement @default(HEAD) // –ì–¥–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –∫–æ–¥
  description String?     // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("tracking_pixels")
}

// === –°–ò–°–¢–ï–ú–ê –û–ù–õ–ê–ô–ù –ß–ê–¢–ê ===

// –ß–∞—Ç-—Å–µ—Å—Å–∏–∏
model ChatSession {
  id          String      @id @default(cuid())
  sessionId   String      @unique @default(cuid()) // –ü—É–±–ª–∏—á–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
  status      ChatStatus  @default(ACTIVE)
  subject     String?     // –¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
  priority    ChatPriority @default(NORMAL)
  
  // –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞
  userId      String?     // ID –∫–ª–∏–µ–Ω—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º)
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  assignedTo  String?     // ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞/–∞–¥–º–∏–Ω–∞
  assignedUser User?      @relation("AssignedChats", fields: [assignedTo], references: [id], onDelete: SetNull)
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  clientInfo  String?     // JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ (–±—Ä–∞—É–∑–µ—Ä, IP –∏ —Ç.–¥.)
  source      String      @default("website") // website, telegram, whatsapp
  tags        String      @default("[]") // –¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ (JSON –º–∞—Å—Å–∏–≤)
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  closedAt    DateTime?   // –ö–æ–≥–¥–∞ –±—ã–ª –∑–∞–∫—Ä—ã—Ç —á–∞—Ç
  lastActivity DateTime   @default(now()) // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  
  // –°–≤—è–∑–∏
  messages    ChatMessage[]
  
  @@map("chat_sessions")
}

// –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
model ChatMessage {
  id          String      @id @default(cuid())
  content     String      // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  messageType MessageType @default(TEXT)
  attachments String?     // JSON –º–∞—Å—Å–∏–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  
  // –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
  senderId    String?     // ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
  sender      User?       @relation(fields: [senderId], references: [id], onDelete: SetNull)
  senderType  SenderType  // USER, ADMIN, SYSTEM
  senderName  String?     // –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
  
  // –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —á–∞—Ç—É
  sessionId   String
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  // –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
  isRead      Boolean     @default(false)
  readAt      DateTime?   // –ö–æ–≥–¥–∞ –±—ã–ª–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
  isEdited    Boolean     @default(false)
  editedAt    DateTime?   // –ö–æ–≥–¥–∞ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  metadata    String?     // JSON —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("chat_messages")
}

// === ENUMS –î–õ–Ø –ß–ê–¢–ê ===

enum ChatStatus {
  ACTIVE      // –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
  CLOSED      // –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç
  WAITING     // –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
  TRANSFERRED // –ü–µ—Ä–µ–¥–∞–Ω –¥—Ä—É–≥–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
}

enum ChatPriority {
  LOW         // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  NORMAL      // –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  HIGH        // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  URGENT      // –°—Ä–æ—á–Ω—ã–π
}

enum MessageType {
  TEXT        // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  IMAGE       // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  FILE        // –§–∞–π–ª
  SYSTEM      // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  TYPING      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
}

enum SenderType {
  USER        // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–∫–ª–∏–µ–Ω—Ç
  ADMIN       // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
  MANAGER     // –ú–µ–Ω–µ–¥–∂–µ—Ä
  SYSTEM      // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
}

// === ENUMS –î–õ–Ø –¢–†–ï–ö–ò–ù–ì –ü–ò–ö–°–ï–õ–ï–ô ===

enum PixelType {
  YANDEX_METRIKA    // –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞
  GOOGLE_ANALYTICS  // Google Analytics
  FACEBOOK_PIXEL    // Facebook Pixel
  VK_PIXEL         // VK Pixel
  GOOGLE_ADS       // Google Ads
  YANDEX_DIRECT    // –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç
  CUSTOM_HTML      // –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π HTML/JS –∫–æ–¥
}

enum PixelPlacement {
  HEAD            // –í <head> —Å–µ–∫—Ü–∏–∏
  BODY_START      // –í –Ω–∞—á–∞–ª–µ <body>
  BODY_END        // –í –∫–æ–Ω—Ü–µ <body>
}