const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testDatabaseConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const productCount = await prisma.product.count();
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${productCount}`);
    
    if (productCount > 0) {
      const sample = await prisma.product.findFirst({
        where: { published: true },
        select: { name: true, slug: true }
      });
      console.log(`üìù –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: "${sample?.name}" -> ${sample?.slug}`);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', error.message);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ sitemap —Ä–æ—É—Ç–∞
function createFixedSitemapRoute() {
  const routeContent = `import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function GET(request: NextRequest) {
  const baseUrl = 'https://naken.store'
  
  try {
    console.log('üó∫Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é sitemap.xml...')
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    const products = await prisma.product.findMany({
      where: {
        published: true,
        slug: {
          not: null,
        },
        NOT: {
          slug: ''
        }
      },
      select: {
        slug: true,
        updatedAt: true,
      },
      orderBy: {
        updatedAt: 'desc'
      }
    })
    
    console.log(\`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è sitemap: \${products.length}\`)
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const staticPages = [
      { url: baseUrl, lastModified: new Date(), priority: '1.0', changeFreq: 'daily' },
      { url: \`\${baseUrl}/catalog\`, lastModified: new Date(), priority: '0.9', changeFreq: 'daily' },
      { url: \`\${baseUrl}/contacts\`, lastModified: new Date(), priority: '0.9', changeFreq: 'monthly' },
      { url: \`\${baseUrl}/delivery\`, lastModified: new Date(), priority: '0.8', changeFreq: 'monthly' },
      { url: \`\${baseUrl}/payment\`, lastModified: new Date(), priority: '0.8', changeFreq: 'monthly' },
      { url: \`\${baseUrl}/returns\`, lastModified: new Date(), priority: '0.8', changeFreq: 'monthly' },
      { url: \`\${baseUrl}/terms\`, lastModified: new Date(), priority: '0.6', changeFreq: 'yearly' },
      { url: \`\${baseUrl}/privacy\`, lastModified: new Date(), priority: '0.6', changeFreq: 'yearly' },
      { url: \`\${baseUrl}/offer\`, lastModified: new Date(), priority: '0.6', changeFreq: 'yearly' },
      { url: \`\${baseUrl}/intro\`, lastModified: new Date(), priority: '0.5', changeFreq: 'monthly' },
    ]

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML
    let xml = \`<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9
        http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
\`

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    staticPages.forEach((page) => {
      xml += \`  <url>
    <loc>\${page.url}</loc>
    <lastmod>\${page.lastModified.toISOString()}</lastmod>
    <changefreq>\${page.changeFreq}</changefreq>
    <priority>\${page.priority}</priority>
  </url>
\`
    })

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    products.forEach((product) => {
      xml += \`  <url>
    <loc>\${baseUrl}/product/\${product.slug}</loc>
    <lastmod>\${product.updatedAt.toISOString()}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
\`
    })

    xml += \`</urlset>\`
    
    console.log(\`‚úÖ Sitemap —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: \${staticPages.length + products.length} URL\`)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ headers
    return new NextResponse(xml, {
      status: 200,
      headers: {
        'Content-Type': 'application/xml; charset=utf-8',
        'Cache-Control': 'public, max-age=300, s-maxage=300', // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
        'X-Robots-Tag': 'noindex',
      }
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sitemap:', error)
    
    // Fallback sitemap —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    const fallbackXml = \`<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>\${baseUrl}</loc>
    <lastmod>\${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>\${baseUrl}/catalog</loc>
    <lastmod>\${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>
</urlset>\`
    
    return new NextResponse(fallbackXml, {
      status: 200,
      headers: {
        'Content-Type': 'application/xml; charset=utf-8',
        'Cache-Control': 'no-cache',
      }
    })
  } finally {
    await prisma.$disconnect()
  }
} 
`;

  return routeContent;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function fixSitemapRoute() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π sitemap —Ä–æ—É—Ç...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    const dbWorking = await testDatabaseConnection();
    if (!dbWorking) {
      console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–∑–¥–∞—é fallback sitemap');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–æ—É—Ç
    const newRouteContent = createFixedSitemapRoute();
    const routePath = path.join(process.cwd(), 'src', 'app', 'sitemap.xml', 'route.ts');
    
    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
    const backupPath = routePath + '.backup';
    if (fs.existsSync(routePath)) {
      fs.copyFileSync(routePath, backupPath);
      console.log(`üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${backupPath}`);
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç
    fs.writeFileSync(routePath, newRouteContent, 'utf8');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${routePath}`);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π sitemap (–º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å)
    const staticSitemapPath = path.join(process.cwd(), 'public', 'sitemap.xml');
    if (fs.existsSync(staticSitemapPath)) {
      fs.unlinkSync(staticSitemapPath);
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π public/sitemap.xml');
    }
    
    console.log('\nüéâ Sitemap —Ä–æ—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');
    console.log('üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:');
    console.log('   1. pm2 restart naken-store');
    console.log('   2. curl https://naken.store/sitemap.xml');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –ø–æ—è–≤–∏–ª–∏—Å—å');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è sitemap:', error);
    return false;
  }
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Next.js
async function clearNextJSCache() {
  console.log('üßπ –û—á–∏—â–∞—é –∫—ç—à Next.js...');
  
  try {
    const cacheDir = path.join(process.cwd(), '.next', 'cache');
    if (fs.existsSync(cacheDir)) {
      fs.rmSync(cacheDir, { recursive: true, force: true });
      console.log('‚úÖ –ö—ç—à Next.js –æ—á–∏—â–µ–Ω');
    }
    
    // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É server
    const serverDir = path.join(process.cwd(), '.next', 'server');
    if (fs.existsSync(serverDir)) {
      fs.rmSync(serverDir, { recursive: true, force: true });
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫—ç—à –æ—á–∏—â–µ–Ω');
    }
    
    return true;
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error.message);
    return false;
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'test':
      await testDatabaseConnection();
      break;
      
    case 'fix':
      await fixSitemapRoute();
      break;
      
    case 'clear-cache':
      await clearNextJSCache();
      break;
      
    case 'full':
      console.log('üîß –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ sitemap...\n');
      await testDatabaseConnection();
      console.log('\n' + '='.repeat(50) + '\n');
      await fixSitemapRoute();
      console.log('\n' + '='.repeat(50) + '\n');
      await clearNextJSCache();
      break;
      
    default:
      console.log(`
üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ sitemap –¥–ª—è NAKEN Store

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/fix-sitemap-route.js test        - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
  node scripts/fix-sitemap-route.js fix         - –ò—Å–ø—Ä–∞–≤–∏—Ç—å sitemap —Ä–æ—É—Ç
  node scripts/fix-sitemap-route.js clear-cache - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Next.js
  node scripts/fix-sitemap-route.js full        - –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

–ü—Ä–æ–±–ª–µ–º–∞:
  ‚ùå Sitemap –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ sitemap
  ‚ùå Next.js –∫—ç—à–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é

–†–µ—à–µ–Ω–∏–µ:
  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–æ—É—Ç src/app/sitemap.xml/route.ts
  ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
  ‚úÖ –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/fix-sitemap-route.js full
  pm2 restart naken-store
  curl https://naken.store/sitemap.xml
      `);
  }
  
  await prisma.$disconnect();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { fixSitemapRoute, testDatabaseConnection, clearNextJSCache }; 