const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function generateSitemap() {
  console.log('üó∫Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é sitemap.xml –¥–ª—è –Ø–Ω–¥–µ–∫—Å–∞...');
  
  try {
    const baseUrl = 'https://naken.store';
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany({
      where: {
        published: true,
        slug: {
          not: null,
        },
        NOT: {
          slug: ''
        }
      },
      select: {
        slug: true,
        updatedAt: true,
      },
      orderBy: {
        updatedAt: 'desc'
      }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const staticPages = [
      { url: baseUrl, lastModified: new Date(), priority: '1.0', changeFreq: 'daily' },
      { url: `${baseUrl}/catalog`, lastModified: new Date(), priority: '0.9', changeFreq: 'daily' },
      { url: `${baseUrl}/contacts`, lastModified: new Date(), priority: '0.9', changeFreq: 'monthly' },
      { url: `${baseUrl}/delivery`, lastModified: new Date(), priority: '0.8', changeFreq: 'monthly' },
      { url: `${baseUrl}/payment`, lastModified: new Date(), priority: '0.8', changeFreq: 'monthly' },
      { url: `${baseUrl}/returns`, lastModified: new Date(), priority: '0.8', changeFreq: 'monthly' },
      { url: `${baseUrl}/terms`, lastModified: new Date(), priority: '0.6', changeFreq: 'yearly' },
      { url: `${baseUrl}/privacy`, lastModified: new Date(), priority: '0.6', changeFreq: 'yearly' },
      { url: `${baseUrl}/offer`, lastModified: new Date(), priority: '0.6', changeFreq: 'yearly' },
      { url: `${baseUrl}/intro`, lastModified: new Date(), priority: '0.5', changeFreq: 'monthly' },
    ];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML
    let xml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9
        http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    staticPages.forEach((page) => {
      xml += `  <url>
    <loc>${page.url}</loc>
    <lastmod>${page.lastModified.toISOString()}</lastmod>
    <changefreq>${page.changeFreq}</changefreq>
    <priority>${page.priority}</priority>
  </url>
`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    products.forEach((product) => {
      xml += `  <url>
    <loc>${baseUrl}/product/${product.slug}</loc>
    <lastmod>${product.updatedAt.toISOString()}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
`;
    });

    xml += `</urlset>`;

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const sitemapPath = path.join(process.cwd(), 'public', 'sitemap.xml');
    fs.writeFileSync(sitemapPath, xml, 'utf8');
    
    console.log(`‚úÖ Sitemap —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${sitemapPath}`);
    console.log(`üìÑ –í—Å–µ–≥–æ URL –≤ sitemap: ${staticPages.length + products.length}`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ sitemap: ${products.length}`);
    console.log(`üìã –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: ${staticPages.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
    if (products.length > 0) {
      console.log('\nüîó –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ sitemap:');
      products.slice(0, 5).forEach(product => {
        console.log(`   ${baseUrl}/product/${product.slug}`);
      });
      if (products.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${products.length - 5} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
    }

    return { success: true, totalUrls: staticPages.length + products.length, products: products.length };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sitemap:', error);
    return { success: false, error: error.message };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ
async function checkProducts() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const total = await prisma.product.count();
    const published = await prisma.product.count({ where: { published: true } });
    const withSlug = await prisma.product.count({ 
      where: { 
        published: true,
        slug: { not: null },
        NOT: { slug: '' }
      } 
    });
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${total}`);
    console.log(`   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: ${published}`);
    console.log(`   –° –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º slug: ${withSlug}`);
    
    if (withSlug > 0) {
      const sampleProducts = await prisma.product.findMany({
        where: { 
          published: true,
          slug: { not: null },
          NOT: { slug: '' }
        },
        select: {
          name: true,
          slug: true,
          updatedAt: true
        },
        take: 3
      });
      
      console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
      sampleProducts.forEach(product => {
        console.log(`   "${product.name}" -> /product/${product.slug}`);
      });
    }
    
    return { total, published, withSlug };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return { error: error.message };
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'check':
      await checkProducts();
      break;
      
    case 'generate':
      const result = await generateSitemap();
      if (result.success) {
        console.log('\nüéâ Sitemap —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
        console.log('üìã –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª public/sitemap.xml');
      }
      break;
      
    case 'full':
      console.log('üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...\n');
      await checkProducts();
      console.log('\n' + '='.repeat(50) + '\n');
      await generateSitemap();
      break;
      
    default:
      console.log(`
üó∫Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä sitemap –¥–ª—è NAKEN Store

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/generate-sitemap.js check     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ
  node scripts/generate-sitemap.js generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å sitemap.xml
  node scripts/generate-sitemap.js full     - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è

–î–ª—è –Ø–Ω–¥–µ–∫—Å–∞ –≤–∞–∂–Ω–æ:
  ‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ sitemap
  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π XML —Ñ–æ—Ä–º–∞—Ç
  ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã lastmod
  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ (0.8)

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/generate-sitemap.js check
  node scripts/generate-sitemap.js full
      `);
  }
  
  await prisma.$disconnect();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { generateSitemap, checkProducts }; 