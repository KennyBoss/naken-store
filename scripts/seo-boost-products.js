const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑ seo-boost.ts (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Node.js)
function generateLongTailKeywords(product) {
  const keywords = []
  const name = product.name.toLowerCase()
  const category = '–æ–¥–µ–∂–¥–∞'
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
  keywords.push(`–∫—É–ø–∏—Ç—å ${name}`)
  keywords.push(`${name} –∫—É–ø–∏—Ç—å –æ–Ω–ª–∞–π–Ω`)
  keywords.push(`${name} –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω`)
  keywords.push(`${name} —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π`)
  keywords.push(`${name} NAKEN Store`)
  
  // –¶–µ–Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  if (product.price < 2000) {
    keywords.push(`${category} –¥–æ 2000 —Ä—É–±–ª–µ–π`)
    keywords.push(`–Ω–µ–¥–æ—Ä–æ–≥–∞—è ${category}`)
  } else if (product.price > 5000) {
    keywords.push(`–ø—Ä–µ–º–∏—É–º ${category}`)
    keywords.push(`–¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∞—è ${category}`)
  }
  
  // –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  keywords.push(`${category} –º–æ—Å–∫–≤–∞`)
  keywords.push(`–∫—É–ø–∏—Ç—å ${category} –≤ –º–æ—Å–∫–≤–µ`)
  
  // Old money —Å—Ç–∏–ª—å
  if (name.includes('old money') || name.includes('–∫–ª–∞—Å—Å–∏–∫')) {
    keywords.push(`–æ–¥–µ–∂–¥–∞ –≤ —Å—Ç–∏–ª–µ old money`)
    keywords.push(`–∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã`)
    keywords.push(`—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –æ–¥–µ–∂–¥–∞`)
  }
  
  return keywords.join(', ')
}

function generateOptimizedTitle(product) {
  const price = product.salePrice || product.price
  const discount = product.salePrice ? 
    Math.round(((product.price - product.salePrice) / product.price) * 100) : 0
  
  // –í–∞—Ä–∏–∞–Ω—Ç—ã title —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ –≤ 60 —Å–∏–º–≤–æ–ª–æ–≤
  const variants = [
    `${product.name} | NAKEN Store`,
    `${product.name} –∑–∞ ${price.toLocaleString('ru-RU')}‚ÇΩ | NAKEN`,
    ...(discount > 0 ? [`${product.name} -${discount}% | NAKEN Store`] : []),
    `–ö—É–ø–∏—Ç—å ${product.name} | NAKEN Store`
  ]
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π
  return variants.find(title => title.length <= 60) || variants[0]
}

function generateSEODescription(product) {
  const price = product.salePrice || product.price
  const benefits = [
    '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
    '–±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏',
    '–≤–æ–∑–≤—Ä–∞—Ç 14 –¥–Ω–µ–π',
    '–ø—Ä–∏–º–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'
  ]
  
  if (product.salePrice) {
    const discount = Math.round(((product.price - product.salePrice) / product.price) * 100)
    benefits.unshift(`—Å–∫–∏–¥–∫–∞ ${discount}%`)
  }
  
  let description = `${product.name} –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ NAKEN Store –∑–∞ ${price.toLocaleString('ru-RU')}‚ÇΩ. `
  description += `${benefits.join(', ').replace(/^./, str => str.toUpperCase())}.`
  
  // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤
  const emotional = [
    ' –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å—Ç–∏–ª—å–Ω–æ–π –æ–¥–µ–∂–¥–µ!',
    ' –í–æ–ø–ª–æ—â–µ–Ω–∏–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞.',
    ' –í–∞—à —Å–µ–∫—Ä–µ—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–≥–æ —Å—Ç–∏–ª—è.'
  ]
  
  if (description.length < 130) {
    description += emotional[Math.floor(Math.random() * emotional.length)]
  }
  
  return description.slice(0, 160) // SEO –ª–∏–º–∏—Ç
}

function generateProductFAQ(product) {
  const faqs = []
  
  // –ë–∞–∑–æ–≤—ã–µ FAQ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
  faqs.push({
    question: `–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ ${product.name}?`,
    answer: `–î–æ—Å—Ç–∞–≤–∫–∞ ${product.name} –±–µ—Å–ø–ª–∞—Ç–Ω–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 3000‚ÇΩ. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ - –æ—Ç 300‚ÇΩ.`
  })
  
  faqs.push({
    question: `–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å ${product.name}?`,
    answer: `–î–∞! –í–æ–∑–≤—Ä–∞—Ç ${product.name} –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω. –ü—Ä–∏–º–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.`
  })
  
  faqs.push({
    question: `–ö–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ ${product.name}?`,
    answer: `${product.name} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∏—Ä–∞—Ç—å –ø—Ä–∏ 30¬∞C, –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π –æ—Ç–∂–∏–º. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–µ.`
  })
  
  return JSON.stringify(faqs)
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async function optimizeProductSEO(productId) {
  try {
    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: {
        color: true,
        sizes: {
          include: { size: true }
        }
      }
    })
    
    if (!product) {
      console.log(`‚ùå –¢–æ–≤–∞—Ä —Å ID ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO-–¥–∞–Ω–Ω—ã–µ
    const optimizedTitle = generateOptimizedTitle(product)
    const seoDescription = generateSEODescription(product)
    const keywords = generateLongTailKeywords(product)
    const faq = generateProductFAQ(product)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    const updatedProduct = await prisma.product.update({
      where: { id: productId },
      data: {
        seoTitle: optimizedTitle,
        description: seoDescription,
        seoKeywords: keywords,
        faq: faq,
        // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        updatedAt: new Date()
      }
    })
    
    console.log(`‚úÖ –¢–æ–≤–∞—Ä "${product.name}" –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω:`)
    console.log(`   üìù Title: ${optimizedTitle}`)
    console.log(`   üìÑ Description: ${seoDescription.slice(0, 100)}...`)
    console.log(`   üîç Keywords: ${keywords.split(', ').length} —à—Ç—É–∫`)
    console.log(`   ‚ùì FAQ: ${JSON.parse(faq).length} –≤–æ–ø—Ä–æ—Å–æ–≤`)
    
    return updatedProduct
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error)
  }
}

// –ú–∞—Å—Å–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
async function optimizeAllProducts() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤...')
  
  const products = await prisma.product.findMany({
    where: { published: true },
    select: { id: true, name: true }
  })
  
  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`)
  
  let successCount = 0
  let errorCount = 0
  
  for (const product of products) {
    try {
      await optimizeProductSEO(product.id)
      successCount++
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
      await new Promise(resolve => setTimeout(resolve, 100))
    } catch (error) {
      errorCount++
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º ${product.name}:`, error.message)
    }
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:')
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount} —Ç–æ–≤–∞—Ä–æ–≤`)
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount} —Ç–æ–≤–∞—Ä–æ–≤`)
  console.log(`üìà –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º`)
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ slug
async function optimizeProductBySlug(slug) {
  const product = await prisma.product.findUnique({
    where: { slug: slug }
  })
  
  if (!product) {
    console.log(`‚ùå –¢–æ–≤–∞—Ä —Å slug "${slug}" –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    return
  }
  
  return await optimizeProductSEO(product.id)
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ SEO
async function generateSEOReport() {
  console.log('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO-–æ—Ç—á–µ—Ç...')
  
  const products = await prisma.product.findMany({
    where: { published: true },
    select: {
      id: true,
      name: true,
      slug: true,
      description: true,
      seoTitle: true,
      seoKeywords: true,
      price: true,
      salePrice: true,
      views: true
    }
  })
  
  const report = {
    totalProducts: products.length,
    withSEOTitle: products.filter(p => p.seoTitle).length,
    withDescription: products.filter(p => p.description && p.description.length > 50).length,
    withKeywords: products.filter(p => p.seoKeywords).length,
    avgDescriptionLength: Math.round(
      products.reduce((sum, p) => sum + (p.description?.length || 0), 0) / products.length
    ),
    topProducts: products
      .sort((a, b) => (b.views || 0) - (a.views || 0))
      .slice(0, 10)
      .map(p => ({
        name: p.name,
        slug: p.slug,
        views: p.views || 0,
        hasSEO: !!(p.seoTitle && p.description && p.seoKeywords)
      }))
  }
  
  console.log('\nüìà SEO –û–¢–ß–ï–¢:')
  console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${report.totalProducts}`)
  console.log(`üìù –° SEO Title: ${report.withSEOTitle} (${Math.round(report.withSEOTitle / report.totalProducts * 100)}%)`)
  console.log(`üìÑ –° –æ–ø–∏—Å–∞–Ω–∏–µ–º: ${report.withDescription} (${Math.round(report.withDescription / report.totalProducts * 100)}%)`)
  console.log(`üîç –° –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: ${report.withKeywords} (${Math.round(report.withKeywords / report.totalProducts * 100)}%)`)
  console.log(`üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: ${report.avgDescriptionLength} —Å–∏–º–≤–æ–ª–æ–≤`)
  
  console.log('\nüèÜ –¢–û–ü-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º:')
  report.topProducts.forEach((product, index) => {
    const seoStatus = product.hasSEO ? '‚úÖ' : '‚ùå'
    console.log(`${index + 1}. ${product.name} - ${product.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ${seoStatus}`)
  })
  
  return report
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2]
  const argument = process.argv[3]
  
  switch (command) {
    case 'all':
      await optimizeAllProducts()
      break
      
    case 'product':
      if (!argument) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞: node seo-boost-products.js product <id>')
        return
      }
      await optimizeProductSEO(parseInt(argument))
      break
      
    case 'slug':
      if (!argument) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ slug —Ç–æ–≤–∞—Ä–∞: node seo-boost-products.js slug <slug>')
        return
      }
      await optimizeProductBySlug(argument)
      break
      
    case 'report':
      await generateSEOReport()
      break
      
    default:
      console.log(`
üöÄ NAKEN SEO Optimizer

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node seo-boost-products.js all           - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
  node seo-boost-products.js product <id>  - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
  node seo-boost-products.js slug <slug>   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ slug
  node seo-boost-products.js report       - –ü–æ–∫–∞–∑–∞—Ç—å SEO –æ—Ç—á–µ—Ç

–ü—Ä–∏–º–µ—Ä—ã:
  node seo-boost-products.js all
  node seo-boost-products.js product 1
  node seo-boost-products.js slug futbolka-old-money
  node seo-boost-products.js report
      `)
  }
  
  await prisma.$disconnect()
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error)
}

module.exports = {
  optimizeProductSEO,
  optimizeAllProducts,
  generateSEOReport,
  optimizeProductBySlug
} 