const { exec } = require('child_process');
const { promisify } = require('util');
const { PrismaClient } = require('@prisma/client');
const { generateSEOData } = require('./seo-boost');

const execAsync = promisify(exec);
const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥
async function executeSQLCommand(command) {
  try {
    const { stdout, stderr } = await execAsync(command);
    if (stderr && !stderr.includes('NOTICE')) {
      console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', stderr);
    }
    return { success: true, output: stdout };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SEO –ø–æ–ª–µ–π
function generateSEOFieldsSQL() {
  return `
-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ SEO –ø–æ–ª–µ–π –∫ —Ç–∞–±–ª–∏—Ü–µ products (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
DO $$
BEGIN
  -- –î–æ–±–∞–≤–ª—è–µ–º seoTitle –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                 WHERE table_name='products' AND column_name='seoTitle') THEN
    ALTER TABLE products ADD COLUMN "seoTitle" TEXT;
  END IF;
  
  -- –î–æ–±–∞–≤–ª—è–µ–º seoKeywords –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                 WHERE table_name='products' AND column_name='seoKeywords') THEN
    ALTER TABLE products ADD COLUMN "seoKeywords" TEXT;
  END IF;
  
  -- –î–æ–±–∞–≤–ª—è–µ–º faq –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                 WHERE table_name='products' AND column_name='faq') THEN
    ALTER TABLE products ADD COLUMN "faq" TEXT;
  END IF;
  
  -- –î–æ–±–∞–≤–ª—è–µ–º views –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                 WHERE table_name='products' AND column_name='views') THEN
    ALTER TABLE products ADD COLUMN "views" INTEGER DEFAULT 0;
  END IF;
END
$$;
  `;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
async function restoreFromSQLDump(dumpFilePath) {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ SQL –¥–∞–º–ø–∞...');
  console.log(`üìÅ –§–∞–π–ª –¥–∞–º–ø–∞: ${dumpFilePath}`);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const checkFile = await execAsync(`ls -la "${dumpFilePath}"`);
    if (!checkFile) {
      throw new Error('–§–∞–π–ª –¥–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    console.log('‚úÖ –§–∞–π–ª –¥–∞–º–ø–∞ –Ω–∞–π–¥–µ–Ω');
    
    // 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã
    console.log('üíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã...');
    const backupName = `backup_before_restore_${Date.now()}.sql`;
    const backupCmd = `pg_dump $DATABASE_URL > /tmp/${backupName}`;
    const backup = await executeSQLCommand(backupCmd);
    
    if (backup.success) {
      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: /tmp/${backupName}`);
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
    }
    
    // 3. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('üóëÔ∏è –û—á–∏—â–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã...');
    await prisma.productSize.deleteMany();
    await prisma.cartItem.deleteMany();
    await prisma.wishlistItem.deleteMany();
    await prisma.review.deleteMany();
    await prisma.product.deleteMany();
    
    // 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –¥–∞–º–ø–∞
    console.log('üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–æ–≤–∞—Ä—ã –∏–∑ –¥–∞–º–ø–∞...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesToRestore = [
      'products',
      'colors', 
      'sizes',
      'product_sizes'
    ];
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    const tempFile = '/tmp/products_only.sql';
    
    for (const table of tablesToRestore) {
      console.log(`üìã –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∞–±–ª–∏—Ü—É: ${table}`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –¥–∞–º–ø–∞
      const extractCmd = `grep -A 10000 "COPY public.${table}" "${dumpFilePath}" | head -n -1 > ${tempFile}_${table}`;
      await executeSQLCommand(extractCmd);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
      const restoreCmd = `psql $DATABASE_URL < ${tempFile}_${table}`;
      const result = await executeSQLCommand(restoreCmd);
      
      if (result.success) {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
      } else {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å ${table}:`, result.error);
      }
    }
    
    // 5. –î–æ–±–∞–≤–ª—è–µ–º SEO –ø–æ–ª—è
    console.log('üéØ –î–æ–±–∞–≤–ª—è—é SEO –ø–æ–ª—è...');
    const seoSQL = generateSEOFieldsSQL();
    const seoResult = await executeSQLCommand(`psql $DATABASE_URL -c "${seoSQL}"`);
    
    if (seoResult.success) {
      console.log('‚úÖ SEO –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å SEO –ø–æ–ª—è–º–∏:', seoResult.error);
    }
    
    // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    console.log('üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SEO –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...');
    const products = await prisma.product.findMany();
    
    let seoCount = 0;
    for (const product of products) {
      try {
        const seoData = await generateSEOData({
          name: product.name,
          description: product.description,
          price: product.price
        });
        
        await prisma.product.update({
          where: { id: product.id },
          data: {
            seoTitle: seoData.title,
            seoKeywords: seoData.keywords,
            faq: JSON.stringify(seoData.faq),
            views: 0
          }
        });
        
        seoCount++;
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ SEO –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.name}:`, error.message);
      }
    }
    
    console.log(`‚úÖ SEO –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è ${seoCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.product.count();
    const colorsCount = await prisma.color.count();
    const sizesCount = await prisma.size.count();
    
    console.log('\nüéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${stats}`);
    console.log(`üé® –¶–≤–µ—Ç–æ–≤: ${colorsCount}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä–æ–≤: ${sizesCount}`);
    console.log(`üéØ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ü—Ä–∏–º–µ–Ω–µ–Ω–∞`);
    console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: /tmp/${backupName}`);
    
    // 8. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    await executeSQLCommand(`rm -f ${tempFile}*`);
    
    return { success: true, stats: { products: stats, colors: colorsCount, sizes: sizesCount } };
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    return { success: false, error: error.message };
  }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–æ–ª–Ω–æ–µ)
async function simpleRestore(dumpFilePath) {
  console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π –±–∞–∑—ã...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backupName = `full_backup_${Date.now()}.sql`;
    console.log('üíæ –°–æ–∑–¥–∞—é –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...');
    await executeSQLCommand(`pg_dump $DATABASE_URL > /tmp/${backupName}`);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å—å –¥–∞–º–ø
    console.log('üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ–ª–Ω—É—é –±–∞–∑—É...');
    const restoreCmd = `psql $DATABASE_URL < "${dumpFilePath}"`;
    const result = await executeSQLCommand(restoreCmd);
    
    if (!result.success) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${result.error}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º SEO –ø–æ–ª—è
    console.log('üéØ –î–æ–±–∞–≤–ª—è—é SEO –ø–æ–ª—è...');
    const seoSQL = generateSEOFieldsSQL();
    await executeSQLCommand(`psql $DATABASE_URL -c "${seoSQL}"`);
    
    // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è—é Prisma –∫–ª–∏–µ–Ω—Ç...');
    await executeSQLCommand('npx prisma generate');
    
    console.log('‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: /tmp/${backupName}`);
    
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    return { success: false, error: error.message };
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];
  const dumpPath = process.argv[3] || '/root/naken-store/naken_store_working_backup_20250629_113733_database.sql';
  
  console.log('üóÑÔ∏è NAKEN Store - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ SQL –¥–∞–º–ø–∞\n');
  
  switch (command) {
    case 'safe':
      console.log('üõ°Ô∏è –†–µ–∂–∏–º: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤');
      await restoreFromSQLDump(dumpPath);
      break;
      
    case 'full':
      console.log('‚ö° –†–µ–∂–∏–º: –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã');
      await simpleRestore(dumpPath);
      break;
      
    case 'check':
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –¥–∞–º–ø–∞...');
      try {
        const { stdout } = await execAsync(`head -20 "${dumpPath}"`);
        console.log('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:');
        console.log(stdout);
      } catch (error) {
        console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', error.message);
      }
      break;
      
    default:
      console.log(`
üóÑÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ NAKEN Store –∏–∑ SQL –¥–∞–º–ø–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/restore-from-sql-dump.js safe [path]  - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  node scripts/restore-from-sql-dump.js full [path]  - –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã  
  node scripts/restore-from-sql-dump.js check [path] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –¥–∞–º–ø–∞

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  path - –ü—É—Ç—å –∫ SQL –¥–∞–º–ø—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /root/naken-store/naken_store_working_backup_20250629_113733_database.sql)

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/restore-from-sql-dump.js safe
  node scripts/restore-from-sql-dump.js full /path/to/backup.sql
  node scripts/restore-from-sql-dump.js check

üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û: safe - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã, —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
‚ö° –ë–´–°–¢–†–û: full - –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π –±–∞–∑—ã (–û–°–¢–û–†–û–ñ–ù–û!)
      `);
  }
  
  await prisma.$disconnect();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { restoreFromSQLDump, simpleRestore }; 